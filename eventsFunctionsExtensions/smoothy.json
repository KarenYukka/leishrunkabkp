{
  "author": "",
  "category": "",
  "extensionNamespace": "",
  "fullName": "Smoothy",
  "gdevelopVersion": "",
  "helpPath": "",
  "iconUrl": "",
  "name": "Smoothy",
  "previewIconUrl": "",
  "shortDescription": "",
  "version": "",
  "description": "Originally automatically extracted from events of the project",
  "tags": [],
  "authorIds": [],
  "dependencies": [],
  "globalVariables": [],
  "sceneVariables": [],
  "eventsFunctions": [
    {
      "description": "Create a level according to the \"Levels\" global variable.",
      "fullName": "Create level",
      "functionType": "Action",
      "name": "CreateLevel",
      "sentence": "Create level _PARAM1_ with _PARAM2_  and _PARAM3_",
      "events": [
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [
            {
              "type": {
                "value": "Create"
              },
              "parameters": [
                "StartLocation",
                "Launcher",
                "GlobalVariable(Levels[GetArgumentAsNumber(\"Level\")].LauncherX)",
                "GlobalVariable(Levels[GetArgumentAsNumber(\"Level\")].LauncherY)",
                ""
              ]
            }
          ]
        },
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [
            {
              "type": {
                "value": "ModVarScene"
              },
              "parameters": [
                "index",
                "=",
                "0"
              ]
            }
          ]
        },
        {
          "type": "BuiltinCommonInstructions::Repeat",
          "repeatExpression": "GlobalVariableChildCount(Levels[GetArgumentAsNumber(\"Level\")].Gutters)",
          "conditions": [],
          "actions": [
            {
              "type": {
                "value": "Create"
              },
              "parameters": [
                "",
                "Gutter",
                "GlobalVariable(Levels[GetArgumentAsNumber(\"Level\")].Gutters[VariableString(index)].StartX)",
                "GlobalVariable(Levels[GetArgumentAsNumber(\"Level\")].Gutters[VariableString(index)].StartY)",
                ""
              ]
            },
            {
              "type": {
                "value": "Create"
              },
              "parameters": [
                "",
                "BubbleQueue",
                "-100",
                "-100",
                ""
              ]
            },
            {
              "type": {
                "value": "ObjectStack::ObjectStack::AddOnTop"
              },
              "parameters": [
                "Gutter",
                "ObjectStack",
                "BubbleQueue",
                ""
              ]
            },
            {
              "type": {
                "value": "Smoothy::GutterBehavior::SetPathName"
              },
              "parameters": [
                "Gutter",
                "GutterBehavior",
                "=",
                "\"Gutter\" + VariableString(index)",
                ""
              ]
            },
            {
              "type": {
                "value": "Smoothy::GutterBehavior::SetIdentifier"
              },
              "parameters": [
                "Gutter",
                "GutterBehavior",
                "=",
                "Variable(index)",
                ""
              ]
            },
            {
              "type": {
                "value": "CurvedMovement::CreatePathFromSvg"
              },
              "parameters": [
                "",
                "Gutter.GutterBehavior::PathName()",
                "GlobalVariableString(Levels[GetArgumentAsNumber(\"Level\")].Gutters[VariableString(index)].Path)",
                ""
              ]
            },
            {
              "type": {
                "value": "Create"
              },
              "parameters": [
                "StartLocation",
                "Spawner",
                "Gutter.X()",
                "Gutter.Y()",
                ""
              ]
            },
            {
              "type": {
                "value": "LinkedObjects::LinkObjects"
              },
              "parameters": [
                "",
                "Spawner",
                "Gutter"
              ]
            },
            {
              "type": {
                "value": "Smoothy::SpwanerBehavior::SetPathName"
              },
              "parameters": [
                "Spawner",
                "SpwanerBehavior",
                "=",
                "Gutter.GutterBehavior::PathName()",
                ""
              ]
            },
            {
              "type": {
                "value": "CurvedMovement::SpeedPathMovement::SetPath"
              },
              "parameters": [
                "Spawner",
                "SpeedPathMovement",
                "Gutter.GutterBehavior::PathName()",
                "1",
                "",
                ""
              ]
            },
            {
              "type": {
                "value": "Cache"
              },
              "parameters": [
                "Spawner"
              ]
            },
            {
              "type": {
                "value": "Cache"
              },
              "parameters": [
                "Gutter"
              ]
            },
            {
              "type": {
                "value": "Cache"
              },
              "parameters": [
                "BubbleQueue"
              ]
            }
          ],
          "events": [
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "The gutter path is drawn with a shape painter."
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "CurvedMovement::SpeedPathMovement::DrawDebug"
                  },
                  "parameters": [
                    "Spawner",
                    "SpeedPathMovement",
                    "GutterPainter",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "Create"
                  },
                  "parameters": [
                    "StartLocation",
                    "Hole",
                    "GlobalVariable(Levels[GetArgumentAsNumber(\"Level\")].Gutters[VariableString(index)].StartX) + CurvedMovement::PathEndX(Gutter.GutterBehavior::PathName())",
                    "GlobalVariable(Levels[GetArgumentAsNumber(\"Level\")].Gutters[VariableString(index)].StartY) + CurvedMovement::PathEndY(Gutter.GutterBehavior::PathName())",
                    ""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "ModVarScene"
                  },
                  "parameters": [
                    "index",
                    "+",
                    "1"
                  ]
                }
              ]
            }
          ]
        }
      ],
      "parameters": [
        {
          "description": "Level number",
          "name": "Level",
          "type": "expression"
        },
        {
          "description": "Launcher",
          "name": "Launcher",
          "type": "objectList"
        },
        {
          "description": "Gutter",
          "name": "Gutter",
          "supplementaryInformation": "Sprite",
          "type": "objectList"
        },
        {
          "description": "Gutter behavior",
          "name": "GutterBehavior",
          "supplementaryInformation": "Smoothy::GutterBehavior",
          "type": "behavior"
        },
        {
          "description": "Object stack",
          "name": "ObjectStack",
          "supplementaryInformation": "ObjectStack::ObjectStack",
          "type": "behavior"
        },
        {
          "description": "Bubble queue",
          "name": "BubbleQueue",
          "supplementaryInformation": "Sprite",
          "type": "objectList"
        },
        {
          "description": "Gutter painter",
          "name": "GutterPainter",
          "supplementaryInformation": "PrimitiveDrawing::Drawer",
          "type": "objectList"
        },
        {
          "description": "Hole",
          "name": "Hole",
          "supplementaryInformation": "Sprite",
          "type": "objectList"
        },
        {
          "description": "Spawner",
          "name": "Spawner",
          "supplementaryInformation": "Sprite",
          "type": "objectList"
        },
        {
          "description": "Spwaner behavior",
          "name": "SpwanerBehavior",
          "supplementaryInformation": "Smoothy::SpwanerBehavior",
          "type": "behavior"
        },
        {
          "description": "Object stack",
          "name": "ObjectStack",
          "supplementaryInformation": "ObjectStack::ObjectStack",
          "type": "behavior"
        },
        {
          "description": "Movement on a curve",
          "name": "SpeedPathMovement",
          "supplementaryInformation": "CurvedMovement::SpeedPathMovement",
          "type": "behavior"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Check if the inserted bubble matches the color of at least 2 other bubble next to it.",
      "fullName": "Match bubbles",
      "functionType": "Condition",
      "name": "MatchBubbles",
      "sentence": "Match bubbles from _PARAM1_ at _PARAM3_ number _PARAM7_ and _PARAM6_ number _PARAM8_",
      "events": [
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "value": "ObjectStack::ContainsAt"
              },
              "parameters": [
                "",
                "Gutter",
                "ObjectStack",
                "BubbleQueue",
                "GetArgumentAsNumber(\"InsertedBubbleQueueIndex\")",
                ""
              ]
            }
          ],
          "actions": [],
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "ObjectStack::ContainsAt"
                  },
                  "parameters": [
                    "",
                    "BubbleQueue",
                    "ObjectStack",
                    "BoardBubble",
                    "GetArgumentAsNumber(\"InsertedBubbleIndex\")",
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "ModVarSceneTxt"
                  },
                  "parameters": [
                    "_SmoothyExtension.BubbleColor",
                    "=",
                    "BoardBubble.AnimationName()"
                  ]
                }
              ],
              "events": [
                {
                  "disabled": true,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "DebuggerTools::ConsoleLog"
                      },
                      "parameters": [
                        "\"Color: \" + VariableString(_SmoothyExtension.BubbleColor)",
                        "",
                        ""
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Scan bubbles of the same color toward the head."
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "ModVarScene"
                  },
                  "parameters": [
                    "lowerIndex",
                    "=",
                    "GetArgumentAsNumber(\"InsertedBubbleIndex\")"
                  ]
                },
                {
                  "type": {
                    "value": "SetSceneVariableAsBoolean"
                  },
                  "parameters": [
                    "foundOtherColor",
                    "False"
                  ]
                }
              ]
            },
            {
              "infiniteLoopWarning": true,
              "type": "BuiltinCommonInstructions::While",
              "whileConditions": [
                {
                  "type": {
                    "value": "SceneVariableAsBoolean"
                  },
                  "parameters": [
                    "foundOtherColor",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "VarScene"
                  },
                  "parameters": [
                    "lowerIndex",
                    ">",
                    "0"
                  ]
                }
              ],
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "ModVarScene"
                  },
                  "parameters": [
                    "lowerIndex",
                    "-",
                    "1"
                  ]
                }
              ],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "ObjectStack::ContainsBetween"
                      },
                      "parameters": [
                        "",
                        "BubbleQueue",
                        "ObjectStack",
                        "BoardBubble",
                        "Variable(lowerIndex)",
                        "Variable(lowerIndex)",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "inverted": true,
                        "value": "AnimatableCapability::AnimatableBehavior::Name"
                      },
                      "parameters": [
                        "BoardBubble",
                        "Animation",
                        "=",
                        "VariableString(_SmoothyExtension.BubbleColor)"
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetSceneVariableAsBoolean"
                      },
                      "parameters": [
                        "foundOtherColor",
                        "True"
                      ]
                    },
                    {
                      "type": {
                        "value": "ModVarScene"
                      },
                      "parameters": [
                        "lowerIndex",
                        "+",
                        "1"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Scan bubbles of the same color toward the tail."
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "ModVarScene"
                  },
                  "parameters": [
                    "upperIndex",
                    "=",
                    "GetArgumentAsNumber(\"InsertedBubbleIndex\")"
                  ]
                },
                {
                  "type": {
                    "value": "SetSceneVariableAsBoolean"
                  },
                  "parameters": [
                    "foundOtherColor",
                    "False"
                  ]
                }
              ]
            },
            {
              "infiniteLoopWarning": true,
              "type": "BuiltinCommonInstructions::While",
              "whileConditions": [
                {
                  "type": {
                    "value": "SceneVariableAsBoolean"
                  },
                  "parameters": [
                    "foundOtherColor",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "VarScene"
                  },
                  "parameters": [
                    "upperIndex",
                    "<",
                    "BubbleQueue.ObjectStack::Height() - 1"
                  ]
                }
              ],
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "ModVarScene"
                  },
                  "parameters": [
                    "upperIndex",
                    "+",
                    "1"
                  ]
                }
              ],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "ObjectStack::ContainsBetween"
                      },
                      "parameters": [
                        "",
                        "BubbleQueue",
                        "ObjectStack",
                        "BoardBubble",
                        "Variable(upperIndex)",
                        "Variable(upperIndex)",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "inverted": true,
                        "value": "AnimatableCapability::AnimatableBehavior::Name"
                      },
                      "parameters": [
                        "BoardBubble",
                        "Animation",
                        "=",
                        "VariableString(_SmoothyExtension.BubbleColor)"
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetSceneVariableAsBoolean"
                      },
                      "parameters": [
                        "foundOtherColor",
                        "True"
                      ]
                    },
                    {
                      "type": {
                        "value": "ModVarScene"
                      },
                      "parameters": [
                        "upperIndex",
                        "-",
                        "1"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "disabled": true,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "DebuggerTools::ConsoleLog"
                  },
                  "parameters": [
                    "VariableString(lowerIndex) + \" --> \" + VariableString(upperIndex)",
                    "",
                    ""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Move the leading bubbles in a new BubbleQueue.\n\nA new BubbleQueue can't be modified directly because another BubbleQueue is already picked.\nInstead, the leading bubbles are moved into a temporary queue BubbleClipboard."
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "ObjectStack::ContainsBetween"
                  },
                  "parameters": [
                    "",
                    "BubbleQueue",
                    "ObjectStack",
                    "BoardBubble",
                    "Variable(lowerIndex)",
                    "Variable(upperIndex)",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "PickedInstancesCount"
                  },
                  "parameters": [
                    "BoardBubble",
                    ">=",
                    "3"
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnBoolean"
                  },
                  "parameters": [
                    "True"
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::ObjectStack::Remove"
                  },
                  "parameters": [
                    "BubbleQueue",
                    "ObjectStack",
                    "BoardBubble",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::ObjectStack::MoveInto"
                  },
                  "parameters": [
                    "BubbleClipboard",
                    "ObjectStack",
                    "0",
                    "BubbleQueue",
                    "ObjectStack",
                    "0",
                    "Variable(lowerIndex) -1",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetHeadJustSplit"
                  },
                  "parameters": [
                    "BubbleQueue",
                    "BubbleQueueBehavior",
                    ""
                  ]
                }
              ],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::JsCode",
                  "inlineCode": [
                    "// Pick the the matched BoardBubble to handle them in the event sheet. ",
                    "for (const object of objects) {",
                    "    object.pick = true;",
                    "}",
                    "const pickedObjectsLists = eventsFunctionContext.getObjectsLists(\"BoardBubble\");",
                    "/** @type {Array<String>} */",
                    "const objectNames = [];",
                    "pickedObjectsLists.keys(objectNames);",
                    "for (const objectName of objectNames)",
                    "{",
                    "    const pickedObjectsList = pickedObjectsLists.get(objectName);",
                    "    gdjs.evtTools.object.filterPickedObjectsList(pickedObjectsList);",
                    "}",
                    ""
                  ],
                  "parameterObjects": "BoardBubble",
                  "useStrict": true,
                  "eventsSheetExpanded": false
                },
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Save the head state."
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "ModVarSceneTxt"
                      },
                      "parameters": [
                        "headState",
                        "=",
                        "BubbleQueue.BubbleQueueBehavior::HeadState()"
                      ]
                    },
                    {
                      "type": {
                        "value": "ModVarScene"
                      },
                      "parameters": [
                        "headComboLevel",
                        "=",
                        "BubbleQueue.BubbleQueueBehavior::HeadComboLevel()"
                      ]
                    },
                    {
                      "type": {
                        "value": "SetSceneVariableAsBoolean"
                      },
                      "parameters": [
                        "headSplitTimerExists",
                        "False"
                      ]
                    }
                  ],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "CompareObjectTimer"
                          },
                          "parameters": [
                            "BubbleQueue",
                            "\"HeadSplit\"",
                            ">=",
                            "0"
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "SetSceneVariableAsBoolean"
                          },
                          "parameters": [
                            "headSplitTimerExists",
                            "True"
                          ]
                        },
                        {
                          "type": {
                            "value": "ModVarScene"
                          },
                          "parameters": [
                            "headSplitTimerValue",
                            "=",
                            "BubbleQueue.ObjectTimerElapsedTime(\"HeadSplit\")"
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "When the bubbles are matched at the tail of the queue, the original queue is left empty an must be deleted.\n\nThe tailing queue should never be deleted becausebubble spawn inside it."
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "ObjectStack::ObjectStack::IsEmpty"
                      },
                      "parameters": [
                        "BubbleQueue",
                        "ObjectStack",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "ObjectStack::ContainsBetween"
                      },
                      "parameters": [
                        "",
                        "Gutter",
                        "ObjectStack",
                        "BubbleQueue",
                        "0",
                        "Gutter.ObjectStack::Height() - 2",
                        ""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "ObjectStack::ObjectStack::Remove"
                      },
                      "parameters": [
                        "Gutter",
                        "ObjectStack",
                        "BubbleQueue",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "Delete"
                      },
                      "parameters": [
                        "BubbleQueue",
                        ""
                      ]
                    }
                  ],
                  "events": [
                    {
                      "disabled": true,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "value": "DebuggerTools::ConsoleLog"
                          },
                          "parameters": [
                            "\"Remove the tail part\"",
                            "",
                            ""
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "Now that no BubbleQueue is picked, a new one can be created."
        },
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": true,
                "value": "ObjectStack::ObjectStack::IsEmpty"
              },
              "parameters": [
                "BubbleClipboard",
                "ObjectStack",
                ""
              ]
            }
          ],
          "actions": [
            {
              "type": {
                "value": "Create"
              },
              "parameters": [
                "",
                "BubbleQueue",
                "-64",
                "-64",
                ""
              ]
            },
            {
              "type": {
                "value": "ObjectStack::ObjectStack::Insert"
              },
              "parameters": [
                "Gutter",
                "ObjectStack",
                "BubbleQueue",
                "GetArgumentAsNumber(\"InsertedBubbleQueueIndex\")",
                ""
              ]
            },
            {
              "type": {
                "value": "ObjectStack::ObjectStack::MoveAllInto"
              },
              "parameters": [
                "BubbleQueue",
                "ObjectStack",
                "0",
                "BubbleClipboard",
                "ObjectStack",
                ""
              ]
            },
            {
              "type": {
                "value": "Smoothy::BubbleQueueBehavior::SetTailJustSplit"
              },
              "parameters": [
                "BubbleQueue",
                "BubbleQueueBehavior",
                ""
              ]
            }
          ],
          "events": [
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Set back the head state."
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetHeadState"
                  },
                  "parameters": [
                    "BubbleQueue",
                    "BubbleQueueBehavior",
                    "=",
                    "VariableString(headState)",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetHeadComboLevel"
                  },
                  "parameters": [
                    "BubbleQueue",
                    "BubbleQueueBehavior",
                    "=",
                    "Variable(headComboLevel)",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "RemoveObjectTimer"
                  },
                  "parameters": [
                    "BubbleQueue",
                    "\"HeadSplit\""
                  ]
                }
              ],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "SceneVariableAsBoolean"
                      },
                      "parameters": [
                        "headSplitTimerExists",
                        "True"
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "AdvancedTimer::SetObjectTimerElapsedTime"
                      },
                      "parameters": [
                        "",
                        "=",
                        "Variable(headSplitTimerValue)",
                        "BubbleQueue",
                        "\"HeadSplit\"",
                        ""
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "disabled": true,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "DebuggerTools::ConsoleLog"
                  },
                  "parameters": [
                    "\"Insert in Gutter\"",
                    "",
                    ""
                  ]
                }
              ]
            }
          ]
        }
      ],
      "parameters": [
        {
          "description": "Gutter",
          "name": "Gutter",
          "type": "objectList"
        },
        {
          "description": "Object stack behavior",
          "name": "ObjectStack",
          "supplementaryInformation": "ObjectStack::ObjectStack",
          "type": "behavior"
        },
        {
          "description": "Bubble queue",
          "name": "BubbleQueue",
          "supplementaryInformation": "Sprite",
          "type": "objectList"
        },
        {
          "description": "Bubble queue behavior",
          "name": "BubbleQueueBehavior",
          "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
          "type": "behavior"
        },
        {
          "description": "Object stack behavior",
          "name": "ObjectStack",
          "supplementaryInformation": "ObjectStack::ObjectStack",
          "type": "behavior"
        },
        {
          "description": "Board bubble",
          "name": "BoardBubble",
          "supplementaryInformation": "Sprite",
          "type": "objectList"
        },
        {
          "description": "Inserted bubble queue index",
          "name": "InsertedBubbleQueueIndex",
          "type": "expression"
        },
        {
          "description": "Inserted bubble index",
          "name": "InsertedBubbleIndex",
          "supplementaryInformation": "Sprite",
          "type": "expression"
        },
        {
          "description": "Bubble clipboard",
          "name": "BubbleClipboard",
          "supplementaryInformation": "Sprite",
          "type": "objectList"
        },
        {
          "description": "Object stack behavior",
          "name": "ObjectStack",
          "supplementaryInformation": "ObjectStack::ObjectStack",
          "type": "behavior"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Check if there is at least 3 bubbles of the same color at the impact between 2 queues.",
      "fullName": "Match bubbles bewteen 2 queues",
      "functionType": "Condition",
      "name": "MatchBubblesBetween",
      "sentence": "Match _PARAM6_ from _PARAM1_ at _PARAM3_ number _PARAM7_ and the bubble queue ahead",
      "events": [
        {
          "colorB": 228,
          "colorG": 176,
          "colorR": 74,
          "creationTime": 0,
          "name": "Scan bubbles",
          "source": "",
          "type": "BuiltinCommonInstructions::Group",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Scan the leading queue."
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "ObjectStack::ContainsAt"
                  },
                  "parameters": [
                    "",
                    "Gutter",
                    "ObjectStack",
                    "BubbleQueue",
                    "GetArgumentAsNumber(\"TaillingQueueIndex\") - 1",
                    ""
                  ]
                }
              ],
              "actions": [],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "ObjectStack::HasOnTop"
                      },
                      "parameters": [
                        "",
                        "BubbleQueue",
                        "ObjectStack",
                        "BoardBubble",
                        ""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "ModVarSceneTxt"
                      },
                      "parameters": [
                        "bubbleColor",
                        "=",
                        "BoardBubble.AnimationName()"
                      ]
                    }
                  ],
                  "events": [
                    {
                      "disabled": true,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "value": "DebuggerTools::ConsoleLog"
                          },
                          "parameters": [
                            "\"Color: \" + VariableString(bubbleColor)",
                            "",
                            ""
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Scan bubbles of the same color toward the head."
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "ModVarScene"
                      },
                      "parameters": [
                        "lowerIndex",
                        "=",
                        "BubbleQueue.ObjectStack::Height()"
                      ]
                    },
                    {
                      "type": {
                        "value": "SetSceneVariableAsBoolean"
                      },
                      "parameters": [
                        "foundOtherColor",
                        "False"
                      ]
                    }
                  ]
                },
                {
                  "infiniteLoopWarning": true,
                  "type": "BuiltinCommonInstructions::While",
                  "whileConditions": [
                    {
                      "type": {
                        "value": "SceneVariableAsBoolean"
                      },
                      "parameters": [
                        "foundOtherColor",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "VarScene"
                      },
                      "parameters": [
                        "lowerIndex",
                        ">",
                        "0"
                      ]
                    }
                  ],
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "ModVarScene"
                      },
                      "parameters": [
                        "lowerIndex",
                        "-",
                        "1"
                      ]
                    }
                  ],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "ObjectStack::ContainsBetween"
                          },
                          "parameters": [
                            "",
                            "BubbleQueue",
                            "ObjectStack",
                            "BoardBubble",
                            "Variable(lowerIndex)",
                            "Variable(lowerIndex)",
                            ""
                          ]
                        },
                        {
                          "type": {
                            "inverted": true,
                            "value": "AnimatableCapability::AnimatableBehavior::Name"
                          },
                          "parameters": [
                            "BoardBubble",
                            "Animation",
                            "=",
                            "VariableString(bubbleColor)"
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "SetSceneVariableAsBoolean"
                          },
                          "parameters": [
                            "foundOtherColor",
                            "True"
                          ]
                        },
                        {
                          "type": {
                            "value": "ModVarScene"
                          },
                          "parameters": [
                            "lowerIndex",
                            "+",
                            "1"
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "ModVarScene"
                      },
                      "parameters": [
                        "headMatchingBubbleCount",
                        "=",
                        "BubbleQueue.ObjectStack::Height() - Variable(lowerIndex)"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Scan the tailling queue."
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "ObjectStack::ContainsAt"
                  },
                  "parameters": [
                    "",
                    "Gutter",
                    "ObjectStack",
                    "BubbleQueue",
                    "GetArgumentAsNumber(\"TaillingQueueIndex\")",
                    ""
                  ]
                }
              ],
              "actions": [],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Scan bubbles of the same color toward the tail."
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "ModVarScene"
                      },
                      "parameters": [
                        "upperIndex",
                        "=",
                        "-1"
                      ]
                    },
                    {
                      "type": {
                        "value": "SetSceneVariableAsBoolean"
                      },
                      "parameters": [
                        "foundOtherColor",
                        "False"
                      ]
                    }
                  ]
                },
                {
                  "infiniteLoopWarning": true,
                  "type": "BuiltinCommonInstructions::While",
                  "whileConditions": [
                    {
                      "type": {
                        "value": "SceneVariableAsBoolean"
                      },
                      "parameters": [
                        "foundOtherColor",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "VarScene"
                      },
                      "parameters": [
                        "upperIndex",
                        "<",
                        "BubbleQueue.ObjectStack::Height() - 1"
                      ]
                    }
                  ],
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "ModVarScene"
                      },
                      "parameters": [
                        "upperIndex",
                        "+",
                        "1"
                      ]
                    }
                  ],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "ObjectStack::ContainsBetween"
                          },
                          "parameters": [
                            "",
                            "BubbleQueue",
                            "ObjectStack",
                            "BoardBubble",
                            "Variable(upperIndex)",
                            "Variable(upperIndex)",
                            ""
                          ]
                        },
                        {
                          "type": {
                            "inverted": true,
                            "value": "AnimatableCapability::AnimatableBehavior::Name"
                          },
                          "parameters": [
                            "BoardBubble",
                            "Animation",
                            "=",
                            "VariableString(bubbleColor)"
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "SetSceneVariableAsBoolean"
                          },
                          "parameters": [
                            "foundOtherColor",
                            "True"
                          ]
                        },
                        {
                          "type": {
                            "value": "ModVarScene"
                          },
                          "parameters": [
                            "upperIndex",
                            "-",
                            "1"
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "ModVarScene"
                      },
                      "parameters": [
                        "tailMatchingBubbleCount",
                        "=",
                        "Variable(upperIndex) + 1"
                      ]
                    }
                  ]
                },
                {
                  "disabled": true,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "DebuggerTools::ConsoleLog"
                      },
                      "parameters": [
                        "\"matchingBubbleCount: \" + VariableString(headMatchingBubbleCount) + \" + \" + VariableString(tailMatchingBubbleCount)",
                        "",
                        ""
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "parameters": []
        },
        {
          "colorB": 228,
          "colorG": 176,
          "colorR": 74,
          "creationTime": 0,
          "name": "Remove bubbles",
          "source": "",
          "type": "BuiltinCommonInstructions::Group",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "VarScene"
                  },
                  "parameters": [
                    "headMatchingBubbleCount",
                    ">",
                    "0"
                  ]
                },
                {
                  "type": {
                    "value": "VarScene"
                  },
                  "parameters": [
                    "tailMatchingBubbleCount",
                    ">",
                    "0"
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::CompareNumbers"
                  },
                  "parameters": [
                    "Variable(headMatchingBubbleCount) + Variable(tailMatchingBubbleCount)",
                    ">=",
                    "3"
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnBoolean"
                  },
                  "parameters": [
                    "True"
                  ]
                }
              ],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "ObjectStack::ContainsAt"
                      },
                      "parameters": [
                        "",
                        "Gutter",
                        "ObjectStack",
                        "BubbleQueue",
                        "GetArgumentAsNumber(\"TaillingQueueIndex\") - 1",
                        ""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::SetTailJustHit"
                      },
                      "parameters": [
                        "BubbleQueue",
                        "BubbleQueueBehavior",
                        ""
                      ]
                    }
                  ],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "ObjectStack::ContainsBetween"
                          },
                          "parameters": [
                            "",
                            "BubbleQueue",
                            "ObjectStack",
                            "BoardBubble",
                            "Variable(lowerIndex)",
                            "BubbleQueue.ObjectStack::Height() - 1",
                            ""
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "ObjectStack::ObjectStack::Remove"
                          },
                          "parameters": [
                            "BubbleQueue",
                            "ObjectStack",
                            "BoardBubble",
                            ""
                          ]
                        }
                      ],
                      "events": [
                        {
                          "type": "BuiltinCommonInstructions::JsCode",
                          "inlineCode": [
                            "// Pick the the matched BoardBubble to handle them in the event sheet.",
                            "gdjs.__SmoothyExtension = gdjs.__SmoothyExtension || {};",
                            "gdjs.__SmoothyExtension.pickedBubbles = [...objects];",
                            ""
                          ],
                          "parameterObjects": "BoardBubble",
                          "useStrict": true,
                          "eventsSheetExpanded": false
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "ObjectStack::ContainsAt"
                      },
                      "parameters": [
                        "",
                        "Gutter",
                        "ObjectStack",
                        "BubbleQueue",
                        "GetArgumentAsNumber(\"TaillingQueueIndex\")",
                        ""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::SetHeadJustHit"
                      },
                      "parameters": [
                        "BubbleQueue",
                        "BubbleQueueBehavior",
                        ""
                      ]
                    }
                  ],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "ObjectStack::ContainsBetween"
                          },
                          "parameters": [
                            "",
                            "BubbleQueue",
                            "ObjectStack",
                            "BoardBubble",
                            "0",
                            "Variable(upperIndex)",
                            ""
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "ObjectStack::ObjectStack::Remove"
                          },
                          "parameters": [
                            "BubbleQueue",
                            "ObjectStack",
                            "BoardBubble",
                            ""
                          ]
                        }
                      ],
                      "events": [
                        {
                          "type": "BuiltinCommonInstructions::JsCode",
                          "inlineCode": [
                            "// Pick the the matched BoardBubble to handle them in the event sheet.",
                            "for (const object of gdjs.__SmoothyExtension.pickedBubbles) {",
                            "    object.pick = true;",
                            "}",
                            "for (const object of objects) {",
                            "    object.pick = true;",
                            "}",
                            "const pickedObjectsLists = eventsFunctionContext.getObjectsLists(\"BoardBubble\");",
                            "/** @type {Array<String>} */",
                            "const objectNames = [];",
                            "pickedObjectsLists.keys(objectNames);",
                            "for (const objectName of objectNames)",
                            "{",
                            "    const pickedObjectsList = pickedObjectsLists.get(objectName);",
                            "    gdjs.evtTools.object.filterPickedObjectsList(pickedObjectsList);",
                            "}",
                            ""
                          ],
                          "parameterObjects": "BoardBubble",
                          "useStrict": true,
                          "eventsSheetExpanded": false
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "When the bubbles are matched at the tail of the queue, the original queue is left empty an must be deleted.\n\nThe tailing queue should never be deleted becausebubble spawn inside it."
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "ObjectStack::ObjectStack::IsEmpty"
                      },
                      "parameters": [
                        "BubbleQueue",
                        "ObjectStack",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "ObjectStack::ContainsBetween"
                      },
                      "parameters": [
                        "",
                        "Gutter",
                        "ObjectStack",
                        "BubbleQueue",
                        "0",
                        "Gutter.ObjectStack::Height() - 2",
                        ""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "ObjectStack::ObjectStack::Remove"
                      },
                      "parameters": [
                        "Gutter",
                        "ObjectStack",
                        "BubbleQueue",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "Delete"
                      },
                      "parameters": [
                        "BubbleQueue",
                        ""
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "parameters": []
        }
      ],
      "parameters": [
        {
          "description": "Gutter",
          "name": "Gutter",
          "type": "objectList"
        },
        {
          "description": "Object stack behavior",
          "name": "ObjectStack",
          "supplementaryInformation": "ObjectStack::ObjectStack",
          "type": "behavior"
        },
        {
          "description": "Bubble queue",
          "name": "BubbleQueue",
          "supplementaryInformation": "Sprite",
          "type": "objectList"
        },
        {
          "description": "Bubble queue behavior",
          "name": "BubbleQueueBehavior",
          "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
          "type": "behavior"
        },
        {
          "description": "Object stack behavior",
          "name": "ObjectStack",
          "supplementaryInformation": "ObjectStack::ObjectStack",
          "type": "behavior"
        },
        {
          "description": "Board bubble",
          "name": "BoardBubble",
          "supplementaryInformation": "Sprite",
          "type": "objectList"
        },
        {
          "description": "Tailling queue index",
          "name": "TaillingQueueIndex",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Check if 2 queues are colliding with each other.",
      "fullName": "Queue collision",
      "functionType": "Condition",
      "name": "IsQueueColliding",
      "sentence": "_PARAM5_ from _PARAM1_ at _PARAM3_ number _PARAM8_ is in collision with the bubble queue ahaed",
      "events": [
        {
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "firstBubblePathPosition variable is only used locally to this condition.\n\nIt's set to 0 in case the queue is empty. It can happens for the queue at the beginning of the path because it's never deleted as bubble are spawned inside it."
        },
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [
            {
              "type": {
                "value": "ModVarScene"
              },
              "parameters": [
                "firstBubblePathPosition",
                "=",
                "0"
              ]
            }
          ]
        },
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "value": "ObjectStack::ContainsAt"
              },
              "parameters": [
                "",
                "Gutter",
                "ObjectStack",
                "BubbleQueue",
                "GetArgumentAsNumber(\"TaillingQueueIndex\")",
                ""
              ]
            },
            {
              "type": {
                "value": "ObjectStack::ContainsAt"
              },
              "parameters": [
                "",
                "BubbleQueue",
                "ObjectStack",
                "BoardBubble",
                "0",
                ""
              ]
            }
          ],
          "actions": [
            {
              "type": {
                "value": "ModVarScene"
              },
              "parameters": [
                "firstBubblePathPosition",
                "=",
                "BoardBubble.SpeedPathMovement::PositionOnPath()"
              ]
            }
          ]
        },
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "value": "ObjectStack::ContainsAt"
              },
              "parameters": [
                "",
                "Gutter",
                "ObjectStack",
                "BubbleQueue",
                "GetArgumentAsNumber(\"TaillingQueueIndex\") - 1",
                ""
              ]
            },
            {
              "type": {
                "value": "ObjectStack::HasOnTop"
              },
              "parameters": [
                "",
                "BubbleQueue",
                "ObjectStack",
                "BoardBubble",
                ""
              ]
            },
            {
              "type": {
                "value": "CurvedMovement::SpeedPathMovement::PositionOnPath"
              },
              "parameters": [
                "BoardBubble",
                "SpeedPathMovement",
                "<=",
                "Variable(firstBubblePathPosition) + BoardBubble.BoardBubbleBehavior::BubbleSize()",
                ""
              ]
            }
          ],
          "actions": [
            {
              "type": {
                "value": "SetReturnBoolean"
              },
              "parameters": [
                "True"
              ]
            }
          ]
        }
      ],
      "parameters": [
        {
          "description": "Gutter",
          "name": "Gutter",
          "type": "objectList"
        },
        {
          "description": "Object stack behavior",
          "name": "ObjectStack",
          "supplementaryInformation": "ObjectStack::ObjectStack",
          "type": "behavior"
        },
        {
          "description": "Bubble queue",
          "name": "BubbleQueue",
          "supplementaryInformation": "Sprite",
          "type": "objectList"
        },
        {
          "description": "Object stack behavior",
          "name": "ObjectStack",
          "supplementaryInformation": "ObjectStack::ObjectStack",
          "type": "behavior"
        },
        {
          "description": "Board bubble",
          "name": "BoardBubble",
          "supplementaryInformation": "Sprite",
          "type": "objectList"
        },
        {
          "description": "Board bubble behavior",
          "name": "BoardBubbleBehavior",
          "supplementaryInformation": "Smoothy::BoardBubbleBehavior",
          "type": "behavior"
        },
        {
          "description": "Speed path movement",
          "name": "SpeedPathMovement",
          "supplementaryInformation": "CurvedMovement::SpeedPathMovement",
          "type": "behavior"
        },
        {
          "description": "Tailling bubble queue index",
          "name": "TaillingQueueIndex",
          "supplementaryInformation": "Sprite",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Merge 2 queues. This action is called when 2 queues are colliding.",
      "fullName": "Merge queue",
      "functionType": "Action",
      "name": "MergeQueue",
      "sentence": "Merge _PARAM6_ from _PARAM1_ at _PARAM3_ number _PARAM9_ with the bubble queue ahead",
      "events": [
        {
          "disabled": true,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [
            {
              "type": {
                "value": "DebuggerTools::ConsoleLog"
              },
              "parameters": [
                "\"Merge\"",
                "",
                ""
              ]
            }
          ]
        },
        {
          "colorB": 228,
          "colorG": 176,
          "colorR": 74,
          "creationTime": 0,
          "name": "Fix the gap",
          "source": "",
          "type": "BuiltinCommonInstructions::Group",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Get information about the queue positions."
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "ObjectStack::ContainsAt"
                  },
                  "parameters": [
                    "",
                    "Gutter",
                    "ObjectStack",
                    "BubbleQueue",
                    "GetArgumentAsNumber(\"TaillingQueueIndex\")",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::ContainsAt"
                  },
                  "parameters": [
                    "",
                    "BubbleQueue",
                    "ObjectStack",
                    "BoardBubble",
                    "0",
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "ModVarScene"
                  },
                  "parameters": [
                    "firstBubblePathPosition",
                    "=",
                    "BoardBubble.SpeedPathMovement::PositionOnPath()"
                  ]
                },
                {
                  "type": {
                    "value": "ModVarScene"
                  },
                  "parameters": [
                    "firstBubbleSpeed",
                    "=",
                    "BoardBubble.SpeedPathMovement::Speed()"
                  ]
                }
              ],
              "events": [
                {
                  "disabled": true,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "DebuggerTools::ConsoleLog"
                      },
                      "parameters": [
                        "\"firstBubblePathPosition: \" + VariableString(firstBubblePathPosition)",
                        "",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "DebuggerTools::ConsoleLog"
                      },
                      "parameters": [
                        "\"firstBubblePathColor: \" + BoardBubble.AnimationName()",
                        "",
                        ""
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "ObjectStack::ContainsAt"
                  },
                  "parameters": [
                    "",
                    "Gutter",
                    "ObjectStack",
                    "BubbleQueue",
                    "GetArgumentAsNumber(\"TaillingQueueIndex\") - 1",
                    ""
                  ]
                }
              ],
              "actions": [],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "ObjectStack::HasOnTop"
                      },
                      "parameters": [
                        "",
                        "BubbleQueue",
                        "ObjectStack",
                        "BoardBubble",
                        ""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "ModVarScene"
                      },
                      "parameters": [
                        "lastBubblePathPosition",
                        "=",
                        "BoardBubble.SpeedPathMovement::PositionOnPath()"
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Fix the gap between the 2 bubble queues."
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "ObjectStack::Contains"
                      },
                      "parameters": [
                        "",
                        "BubbleQueue",
                        "ObjectStack",
                        "BoardBubble",
                        ""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "CurvedMovement::SpeedPathMovement::SetPositionOnPath"
                      },
                      "parameters": [
                        "BoardBubble",
                        "SpeedPathMovement",
                        "+",
                        "Variable(firstBubblePathPosition) + BoardBubble.BoardBubbleBehavior::BubbleSize() - Variable(lastBubblePathPosition)",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "CurvedMovement::SpeedPathMovement::SetSpeed"
                      },
                      "parameters": [
                        "BoardBubble",
                        "SpeedPathMovement",
                        "=",
                        "Variable(firstBubbleSpeed)",
                        ""
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "parameters": []
        },
        {
          "colorB": 228,
          "colorG": 176,
          "colorR": 74,
          "creationTime": 0,
          "name": "Merge the queues",
          "source": "",
          "type": "BuiltinCommonInstructions::Group",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "ObjectStack::ContainsAt"
                  },
                  "parameters": [
                    "",
                    "Gutter",
                    "ObjectStack",
                    "BubbleQueue",
                    "GetArgumentAsNumber(\"TaillingQueueIndex\")",
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "ObjectStack::ObjectStack::MoveAllOnTop"
                  },
                  "parameters": [
                    "BubbleClipboard",
                    "ObjectStack",
                    "BubbleQueue",
                    "ObjectStack",
                    "ObjectStack"
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::ObjectStack::Remove"
                  },
                  "parameters": [
                    "Gutter",
                    "ObjectStack",
                    "BubbleQueue",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "Delete"
                  },
                  "parameters": [
                    "BubbleQueue",
                    ""
                  ]
                }
              ],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Save the tail state."
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "ModVarSceneTxt"
                      },
                      "parameters": [
                        "tailState",
                        "=",
                        "BubbleQueue.BubbleQueueBehavior::TailState()"
                      ]
                    },
                    {
                      "type": {
                        "value": "ModVarScene"
                      },
                      "parameters": [
                        "tailComboLevel",
                        "=",
                        "BubbleQueue.BubbleQueueBehavior::TailComboLevel()"
                      ]
                    },
                    {
                      "type": {
                        "value": "ModVarScene"
                      },
                      "parameters": [
                        "tailSplitTimerValue",
                        "=",
                        "-1"
                      ]
                    }
                  ],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "CompareObjectTimer"
                          },
                          "parameters": [
                            "BubbleQueue",
                            "\"TimeFromTailImpact\"",
                            ">=",
                            "0"
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "ModVarScene"
                          },
                          "parameters": [
                            "tailSplitTimerValue",
                            "=",
                            "BubbleQueue.ObjectTimerElapsedTime(\"TimeFromTailImpact\")"
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "ObjectStack::ContainsAt"
                  },
                  "parameters": [
                    "",
                    "Gutter",
                    "ObjectStack",
                    "BubbleQueue",
                    "GetArgumentAsNumber(\"TaillingQueueIndex\") - 1",
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "ObjectStack::ObjectStack::MoveAllOnTop"
                  },
                  "parameters": [
                    "BubbleQueue",
                    "ObjectStack",
                    "BubbleClipboard",
                    "ObjectStack",
                    "ObjectStack"
                  ]
                },
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetJustMerged"
                  },
                  "parameters": [
                    "BubbleQueue",
                    "BubbleQueueBehavior",
                    "VariableString(tailState)",
                    "Variable(tailComboLevel)",
                    "Variable(tailSplitTimerValue)",
                    ""
                  ]
                }
              ]
            }
          ],
          "parameters": []
        }
      ],
      "parameters": [
        {
          "description": "Gutter",
          "name": "Gutter",
          "type": "objectList"
        },
        {
          "description": "Object stack behavior",
          "name": "ObjectStack",
          "supplementaryInformation": "ObjectStack::ObjectStack",
          "type": "behavior"
        },
        {
          "description": "Bubble queue",
          "name": "BubbleQueue",
          "supplementaryInformation": "Sprite",
          "type": "objectList"
        },
        {
          "description": "Bubble queue behavior",
          "name": "BubbleQueueBehavior",
          "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
          "type": "behavior"
        },
        {
          "description": "Object stack behavior",
          "name": "ObjectStack",
          "supplementaryInformation": "ObjectStack::ObjectStack",
          "type": "behavior"
        },
        {
          "description": "Board bubble",
          "name": "BoardBubble",
          "supplementaryInformation": "Sprite",
          "type": "objectList"
        },
        {
          "description": "Board bubble behavior",
          "name": "BoardBubbleBehavior",
          "supplementaryInformation": "Smoothy::BoardBubbleBehavior",
          "type": "behavior"
        },
        {
          "description": "Speed path movement",
          "name": "SpeedPathMovement",
          "supplementaryInformation": "CurvedMovement::SpeedPathMovement",
          "type": "behavior"
        },
        {
          "description": "Tailling bubble queue index",
          "name": "TaillingQueueIndex",
          "type": "expression"
        },
        {
          "description": "Bubble clipboard",
          "name": "BubbleClipboard",
          "supplementaryInformation": "Sprite",
          "type": "objectList"
        },
        {
          "description": "Object stack behavior",
          "name": "ObjectStack",
          "supplementaryInformation": "ObjectStack::ObjectStack",
          "type": "behavior"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Check if the bubble at 2 end of queues are matching and the leading one must be rewinded.",
      "fullName": "Queue match",
      "functionType": "Condition",
      "name": "IsQueueMatching",
      "sentence": "_PARAM5_ from _PARAM1_ at the tail of _PARAM3_ number _PARAM7_ is matching the bubble at the head of the previous queue",
      "events": [
        {
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "firstBubbleColor variable is only used locally to this condition."
        },
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "value": "ObjectStack::ContainsAt"
              },
              "parameters": [
                "",
                "Gutter",
                "ObjectStack",
                "BubbleQueue",
                "GetArgumentAsNumber(\"LeadingQueueIndex\") + 1",
                ""
              ]
            },
            {
              "type": {
                "value": "ObjectStack::ContainsAt"
              },
              "parameters": [
                "",
                "BubbleQueue",
                "ObjectStack",
                "BoardBubble",
                "0",
                ""
              ]
            }
          ],
          "actions": [
            {
              "type": {
                "value": "ModVarSceneTxt"
              },
              "parameters": [
                "firstBubbleColor",
                "=",
                "BoardBubble.AnimationName()"
              ]
            }
          ]
        },
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "value": "ObjectStack::ContainsAt"
              },
              "parameters": [
                "",
                "Gutter",
                "ObjectStack",
                "BubbleQueue",
                "GetArgumentAsNumber(\"LeadingQueueIndex\")",
                ""
              ]
            },
            {
              "type": {
                "value": "ObjectStack::HasOnTop"
              },
              "parameters": [
                "",
                "BubbleQueue",
                "ObjectStack",
                "BoardBubble",
                ""
              ]
            },
            {
              "type": {
                "value": "AnimatableCapability::AnimatableBehavior::Name"
              },
              "parameters": [
                "BoardBubble",
                "Animation",
                "=",
                "VariableString(firstBubbleColor)"
              ]
            }
          ],
          "actions": [
            {
              "type": {
                "value": "SetReturnBoolean"
              },
              "parameters": [
                "True"
              ]
            }
          ]
        }
      ],
      "parameters": [
        {
          "description": "Gutter",
          "name": "Gutter",
          "type": "objectList"
        },
        {
          "description": "Object stack behavior",
          "name": "ObjectStack",
          "supplementaryInformation": "ObjectStack::ObjectStack",
          "type": "behavior"
        },
        {
          "description": "Bubble queue",
          "name": "BubbleQueue",
          "type": "objectList"
        },
        {
          "description": "Object stack behavior",
          "name": "ObjectStack",
          "supplementaryInformation": "ObjectStack::ObjectStack",
          "type": "behavior"
        },
        {
          "description": "Board bubble",
          "name": "BoardBubble",
          "supplementaryInformation": "Sprite",
          "type": "objectList"
        },
        {
          "description": "Speed path movement",
          "name": "SpeedPathMovement",
          "supplementaryInformation": "CurvedMovement::SpeedPathMovement",
          "type": "behavior"
        },
        {
          "description": "Leading bubble queue index",
          "name": "LeadingQueueIndex",
          "supplementaryInformation": "Sprite",
          "type": "expression"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Return the speed necessary to cover a distance according to the deceleration.",
      "fullName": "Speed to reach",
      "functionType": "Expression",
      "name": "SpeedToReach",
      "sentence": "Braking distance from an initial speed: _PARAM2_ and a deceleration: _PARAM3_ is less than _PARAM1_",
      "events": [
        {
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "This system:\n\ntargetedSpeed = initialSpeed + acceleration * t\ndistance = initialSpeed * t + acceleration * t² / 2\n\nallows to find this formula:\n\ninitialSpeed = sqrt(- 2 * distance * acceleration + targetedSpeed²)\n\n"
        },
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "value": "BuiltinCommonInstructions::CompareNumbers"
              },
              "parameters": [
                "GetArgumentAsNumber(\"Distance\")",
                ">=",
                "0"
              ]
            }
          ],
          "actions": [
            {
              "type": {
                "value": "SetReturnNumber"
              },
              "parameters": [
                "sqrt(2 * GetArgumentAsNumber(\"Distance\") * GetArgumentAsNumber(\"Deceleration\") + GetArgumentAsNumber(\"TargetedSpeed\") * GetArgumentAsNumber(\"TargetedSpeed\"))"
              ]
            }
          ]
        },
        {
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "value": "BuiltinCommonInstructions::CompareNumbers"
              },
              "parameters": [
                "GetArgumentAsNumber(\"Distance\")",
                "<",
                "0"
              ]
            }
          ],
          "actions": [
            {
              "type": {
                "value": "SetReturnNumber"
              },
              "parameters": [
                "-sqrt(-2 * GetArgumentAsNumber(\"Distance\") * GetArgumentAsNumber(\"Deceleration\") + GetArgumentAsNumber(\"TargetedSpeed\") * GetArgumentAsNumber(\"TargetedSpeed\"))"
              ]
            }
          ]
        }
      ],
      "expressionType": {
        "type": "expression"
      },
      "parameters": [
        {
          "description": "Final distance",
          "name": "Distance",
          "type": "expression"
        },
        {
          "description": "Deceleration",
          "name": "Deceleration",
          "type": "expression"
        },
        {
          "description": "Targeted speed",
          "name": "TargetedSpeed",
          "type": "expression"
        }
      ],
      "objectGroups": []
    }
  ],
  "eventsBasedBehaviors": [
    {
      "description": "Animate bubble insertions by pushing leading bubbles from the same queue.",
      "fullName": "Inserted bubble",
      "name": "InsertedBubbleBehavior",
      "objectType": "Sprite",
      "eventsFunctions": [
        {
          "description": "Initialize the insertion animation.",
          "fullName": "Initialize",
          "functionType": "Action",
          "name": "Initialize",
          "sentence": "Initialize the animation of _PARAM0_ for the insertion of _PARAM8_ next to _PARAM6_ in _PARAM4_ of _PARAM2_",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "LinkedObjects::PickObjectsLinkedTo"
                  },
                  "parameters": [
                    "",
                    "BoardBubble",
                    "Object",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::Contains"
                  },
                  "parameters": [
                    "",
                    "BubbleQueue",
                    "ObjectStack",
                    "BoardBubble",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::Contains"
                  },
                  "parameters": [
                    "",
                    "Gutter",
                    "ObjectStack",
                    "BubbleQueue",
                    ""
                  ]
                }
              ],
              "actions": [],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "BuiltinCommonInstructions::CompareNumbers"
                      },
                      "parameters": [
                        "abs(AngleDifference(AngleBetweenPositions(BoardBubble.X(), BoardBubble.Y(), MovingBubble.X(), MovingBubble.Y()), BoardBubble.SpeedPathMovement::MovementAngle()))",
                        ">",
                        "90"
                      ]
                    }
                  ],
                  "actions": [],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Comment",
                      "color": {
                        "b": 109,
                        "g": 230,
                        "r": 255,
                        "textB": 0,
                        "textG": 0,
                        "textR": 0
                      },
                      "comment": "Insert before the hit bubble instead of after."
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "value": "ModVarScene"
                          },
                          "parameters": [
                            "BubbleIndex",
                            "=",
                            "BubbleQueue.ObjectStack::HeightOf(BoardBubble) + 1"
                          ]
                        }
                      ],
                      "events": [
                        {
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "TODO Handle insersion at the tail."
                        },
                        {
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [
                            {
                              "type": {
                                "value": "VarScene"
                              },
                              "parameters": [
                                "BubbleIndex",
                                "<",
                                "BubbleQueue.ObjectStack::Height()"
                              ]
                            }
                          ],
                          "actions": [
                            {
                              "type": {
                                "value": "LinkedObjects::RemoveLinkBetween"
                              },
                              "parameters": [
                                "",
                                "Object",
                                "BoardBubble"
                              ]
                            }
                          ],
                          "events": [
                            {
                              "type": "BuiltinCommonInstructions::Standard",
                              "conditions": [
                                {
                                  "type": {
                                    "value": "AjoutObjConcern"
                                  },
                                  "parameters": [
                                    "",
                                    "BoardBubble"
                                  ]
                                },
                                {
                                  "type": {
                                    "value": "ObjectStack::ContainsAt"
                                  },
                                  "parameters": [
                                    "",
                                    "BubbleQueue",
                                    "ObjectStack",
                                    "BoardBubble",
                                    "Variable(BubbleIndex)",
                                    ""
                                  ]
                                }
                              ],
                              "actions": [
                                {
                                  "type": {
                                    "value": "LinkedObjects::LinkObjects"
                                  },
                                  "parameters": [
                                    "",
                                    "Object",
                                    "BoardBubble"
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "LinkedObjects::PickObjectsLinkedTo"
                  },
                  "parameters": [
                    "",
                    "BoardBubble",
                    "Object",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::Contains"
                  },
                  "parameters": [
                    "",
                    "BubbleQueue",
                    "ObjectStack",
                    "BoardBubble",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::Contains"
                  },
                  "parameters": [
                    "",
                    "Gutter",
                    "ObjectStack",
                    "BubbleQueue",
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "CurvedMovement::SpeedPathMovement::SetPath"
                  },
                  "parameters": [
                    "Object",
                    "SpeedPathMovement",
                    "Gutter.GutterBehavior::PathName()",
                    "1",
                    "",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "SeparateFromObjects"
                  },
                  "parameters": [
                    "MovingBubble",
                    "BoardBubble",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "AnimatableCapability::AnimatableBehavior::SetName"
                  },
                  "parameters": [
                    "Object",
                    "Animation",
                    "=",
                    "MovingBubble.AnimationName()"
                  ]
                },
                {
                  "type": {
                    "value": "ModVarObjet"
                  },
                  "parameters": [
                    "Object",
                    "FreedDistance",
                    "=",
                    "0"
                  ]
                },
                {
                  "type": {
                    "value": "ModVarObjet"
                  },
                  "parameters": [
                    "Object",
                    "InitialDeltaX",
                    "=",
                    "MovingBubble.X() - BoardBubble.X()"
                  ]
                },
                {
                  "type": {
                    "value": "ModVarObjet"
                  },
                  "parameters": [
                    "Object",
                    "InitialDeltaY",
                    "=",
                    "MovingBubble.Y() - BoardBubble.Y()"
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "supplementaryInformation": "Sprite",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::InsertedBubbleBehavior",
              "type": "behavior"
            },
            {
              "description": "Gutter",
              "name": "Gutter",
              "type": "objectList"
            },
            {
              "description": "Gutter behavior",
              "name": "GutterBehavior",
              "supplementaryInformation": "Smoothy::GutterBehavior",
              "type": "behavior"
            },
            {
              "description": "Bubble queue",
              "name": "BubbleQueue",
              "type": "objectList"
            },
            {
              "description": "Object stack",
              "name": "ObjectStack",
              "supplementaryInformation": "ObjectStack::ObjectStack",
              "type": "behavior"
            },
            {
              "description": "Board bubble",
              "name": "BoardBubble",
              "type": "objectList"
            },
            {
              "description": "Speed path movement",
              "name": "SpeedPathMovement",
              "supplementaryInformation": "CurvedMovement::SpeedPathMovement",
              "type": "behavior"
            },
            {
              "description": "Moving bubble",
              "name": "MovingBubble",
              "supplementaryInformation": "Sprite",
              "type": "objectList"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Play the insertion animation. Leading bubbles from the same queue are pushed to make room for the inserted bubble.",
          "fullName": "Play insertion animation",
          "functionType": "Action",
          "name": "PlayInsertion",
          "sentence": "Play the insertion animation of _PARAM0_ in _PARAM6_ from _PARAM4_ of _PARAM2_",
          "events": [
            {
              "disabled": true,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "DebuggerTools::ConsoleLog"
                  },
                  "parameters": [
                    "\"FreedDistance: \" + Object.VariableString(FreedDistance)",
                    "",
                    ""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "VarObjet"
                  },
                  "parameters": [
                    "Object",
                    "FreedDistance",
                    "<",
                    "Object.Behavior::PropertyBubbleSize()"
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "ModVarObjet"
                  },
                  "parameters": [
                    "Object",
                    "PreviousFreedDistance",
                    "=",
                    "Object.Variable(FreedDistance)"
                  ]
                },
                {
                  "type": {
                    "value": "ModVarObjet"
                  },
                  "parameters": [
                    "Object",
                    "FreedDistance",
                    "=",
                    "min(Object.Variable(FreedDistance) + Object.Behavior::PropertyBubbleSize() * TimeDelta() / Object.Behavior::PropertyInsertionDuration(), Object.Behavior::PropertyBubbleSize())"
                  ]
                }
              ],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Move the inserted bubble ahead of the bubble it collides."
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "LinkedObjects::PickObjectsLinkedTo"
                      },
                      "parameters": [
                        "",
                        "BoardBubble",
                        "Object",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "ObjectStack::Contains"
                      },
                      "parameters": [
                        "",
                        "BubbleQueue",
                        "ObjectStack",
                        "BoardBubble",
                        ""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "CurvedMovement::SpeedPathMovement::SetPositionOnPath"
                      },
                      "parameters": [
                        "Object",
                        "SpeedPathMovement",
                        "=",
                        "BoardBubble.SpeedPathMovement::PositionOnPath() + Object.Variable(FreedDistance)",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "MettreXY"
                      },
                      "parameters": [
                        "Object",
                        "=",
                        "lerp(BoardBubble.X() + Object.Variable(InitialDeltaX), Object.X(), Object.Variable(FreedDistance) / Object.Behavior::PropertyBubbleSize())",
                        "=",
                        "lerp(BoardBubble.Y() + Object.Variable(InitialDeltaY), Object.Y(), Object.Variable(FreedDistance) / Object.Behavior::PropertyBubbleSize())"
                      ]
                    }
                  ],
                  "events": [
                    {
                      "disabled": true,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "value": "DebuggerTools::ConsoleLog"
                          },
                          "parameters": [
                            "ToString(Object.X()) + \" \" + ToString(Object.Y())",
                            "",
                            ""
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "value": "ModVarObjet"
                          },
                          "parameters": [
                            "Object",
                            "BubbleIndex",
                            "=",
                            "BubbleQueue.ObjectStack::HeightOf(BoardBubble)"
                          ]
                        }
                      ],
                      "events": [
                        {
                          "disabled": true,
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "value": "DebuggerTools::ConsoleLog"
                              },
                              "parameters": [
                                "\"BubbleIndex: \" + Object.VariableString(BubbleIndex)",
                                "",
                                ""
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Comment",
                      "color": {
                        "b": 109,
                        "g": 230,
                        "r": 255,
                        "textB": 0,
                        "textG": 0,
                        "textR": 0
                      },
                      "comment": "Push all the bubbles of the queue head."
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "AjoutObjConcern"
                          },
                          "parameters": [
                            "",
                            "BoardBubble"
                          ]
                        },
                        {
                          "type": {
                            "value": "ObjectStack::ContainsBetween"
                          },
                          "parameters": [
                            "",
                            "BubbleQueue",
                            "ObjectStack",
                            "BoardBubble",
                            "0",
                            "Object.Variable(BubbleIndex) - 1",
                            ""
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "CurvedMovement::SpeedPathMovement::SetPositionOnPath"
                          },
                          "parameters": [
                            "BoardBubble",
                            "SpeedPathMovement",
                            "+",
                            "Object.Variable(FreedDistance) - Object.Variable(PreviousFreedDistance)",
                            ""
                          ]
                        }
                      ],
                      "events": [
                        {
                          "disabled": true,
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "value": "DebuggerTools::ConsoleLog"
                              },
                              "parameters": [
                                "\"Push: \" + ToString(PickedInstancesCount(BoardBubble))",
                                "",
                                ""
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "supplementaryInformation": "Sprite",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::InsertedBubbleBehavior",
              "type": "behavior"
            },
            {
              "description": "Gutter",
              "name": "Gutter",
              "type": "objectList"
            },
            {
              "description": "Object stack",
              "name": "ObjectStack",
              "supplementaryInformation": "ObjectStack::ObjectStack",
              "type": "behavior"
            },
            {
              "description": "Bubble queue",
              "name": "BubbleQueue",
              "type": "objectList"
            },
            {
              "description": "Object stack",
              "name": "ObjectStack",
              "supplementaryInformation": "ObjectStack::ObjectStack",
              "type": "behavior"
            },
            {
              "description": "Board bubble",
              "name": "BoardBubble",
              "type": "objectList"
            },
            {
              "description": "Speed path movement",
              "name": "SpeedPathMovement",
              "supplementaryInformation": "CurvedMovement::SpeedPathMovement",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Check if the insertion animation is finished.",
          "fullName": "Animation finished",
          "functionType": "Condition",
          "name": "IsAnimationFinished",
          "sentence": "The insertion animation of _PARAM0_ is finished",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "VarObjet"
                  },
                  "parameters": [
                    "Object",
                    "FreedDistance",
                    "=",
                    "Object.Behavior::PropertyBubbleSize()"
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnBoolean"
                  },
                  "parameters": [
                    "True"
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "supplementaryInformation": "Sprite",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::InsertedBubbleBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Create a BoardBubble in place of the InsertedBubble in the queue.",
          "fullName": "Create bubble",
          "functionType": "Action",
          "name": "CreateBubble",
          "sentence": "Replace _PARAM0_ by a new _PARAM7_ into _PARAM5_ from _PARAM2_",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Get the information on the inserted bubble because a BoardBubble can only be initialized when an other BoardBubble is picked."
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "LinkedObjects::PickObjectsLinkedTo"
                  },
                  "parameters": [
                    "",
                    "BoardBubble",
                    "Object",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::Contains"
                  },
                  "parameters": [
                    "",
                    "BubbleQueue",
                    "ObjectStack",
                    "BoardBubble",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::Contains"
                  },
                  "parameters": [
                    "",
                    "Gutter",
                    "ObjectStack",
                    "BubbleQueue",
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "ModVarObjet"
                  },
                  "parameters": [
                    "Object",
                    "PositionOnPath",
                    "=",
                    "BoardBubble.SpeedPathMovement::PositionOnPath() + Object.Behavior::PropertyBubbleSize()"
                  ]
                },
                {
                  "type": {
                    "value": "ModVarObjet"
                  },
                  "parameters": [
                    "Object",
                    "Speed",
                    "=",
                    "BoardBubble.SpeedPathMovement::Speed()"
                  ]
                },
                {
                  "type": {
                    "value": "ModVarObjet"
                  },
                  "parameters": [
                    "Object",
                    "BubbleIndex",
                    "=",
                    "BubbleQueue.ObjectStack::HeightOf(BoardBubble)"
                  ]
                },
                {
                  "type": {
                    "value": "ModVarObjet"
                  },
                  "parameters": [
                    "Object",
                    "QueueIndex",
                    "=",
                    "Gutter.ObjectStack::HeightOf(BubbleQueue)"
                  ]
                },
                {
                  "type": {
                    "value": "ModVarObjet"
                  },
                  "parameters": [
                    "Object",
                    "GutterIdentifier",
                    "=",
                    "Gutter.GutterBehavior::Identifier()"
                  ]
                }
              ],
              "events": [
                {
                  "disabled": true,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "DebuggerTools::ConsoleLog"
                      },
                      "parameters": [
                        "\"BubbleIndex: \" + Object.VariableString(BubbleIndex)",
                        "",
                        ""
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Actually insert the bubble in the queue."
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "Smoothy::GutterBehavior::Identifier"
                  },
                  "parameters": [
                    "Gutter",
                    "GutterBehavior",
                    "=",
                    "Object.Variable(GutterIdentifier)",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::ContainsBetween"
                  },
                  "parameters": [
                    "",
                    "Gutter",
                    "ObjectStack",
                    "BubbleQueue",
                    "Object.Variable(QueueIndex)",
                    "Object.Variable(QueueIndex)",
                    ""
                  ]
                }
              ],
              "actions": [],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "Create"
                      },
                      "parameters": [
                        "",
                        "BoardBubble",
                        "Object.SpeedPathMovement::PathOriginX()",
                        "Object.SpeedPathMovement::PathOriginY()",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "CurvedMovement::SpeedPathMovement::SetPath"
                      },
                      "parameters": [
                        "BoardBubble",
                        "SpeedPathMovement",
                        "Gutter.GutterBehavior::PathName()",
                        "1",
                        "",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "AnimatableCapability::AnimatableBehavior::SetName"
                      },
                      "parameters": [
                        "BoardBubble",
                        "Animation",
                        "=",
                        "Object.AnimationName()"
                      ]
                    },
                    {
                      "type": {
                        "value": "CurvedMovement::SpeedPathMovement::SetPositionOnPath"
                      },
                      "parameters": [
                        "BoardBubble",
                        "SpeedPathMovement",
                        "=",
                        "Object.Variable(PositionOnPath)",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "CurvedMovement::SpeedPathMovement::SetSpeed"
                      },
                      "parameters": [
                        "BoardBubble",
                        "SpeedPathMovement",
                        "=",
                        "Object.Variable(Speed)",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "ObjectStack::ObjectStack::Insert"
                      },
                      "parameters": [
                        "BubbleQueue",
                        "ObjectStack",
                        "BoardBubble",
                        "Object.Variable(BubbleIndex)",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "Delete"
                      },
                      "parameters": [
                        "Object",
                        ""
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "supplementaryInformation": "Sprite",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::InsertedBubbleBehavior",
              "type": "behavior"
            },
            {
              "description": "Gutter",
              "name": "Gutter",
              "type": "objectList"
            },
            {
              "description": "Gutter behavior",
              "name": "GutterBehavior",
              "supplementaryInformation": "Smoothy::GutterBehavior",
              "type": "behavior"
            },
            {
              "description": "Object stack",
              "name": "ObjectStack",
              "supplementaryInformation": "ObjectStack::ObjectStack",
              "type": "behavior"
            },
            {
              "description": "Bubble queue",
              "name": "BubbleQueue",
              "supplementaryInformation": "Sprite",
              "type": "objectList"
            },
            {
              "description": "Object stack",
              "name": "ObjectStack",
              "supplementaryInformation": "ObjectStack::ObjectStack",
              "type": "behavior"
            },
            {
              "description": "Board bubble",
              "name": "BoardBubble",
              "supplementaryInformation": "Sprite",
              "type": "objectList"
            },
            {
              "description": "Speed path movement",
              "name": "SpeedPathMovement",
              "supplementaryInformation": "CurvedMovement::SpeedPathMovement",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Return the index of the queue where the bubble was inserted.",
          "fullName": "Queue index",
          "functionType": "Expression",
          "name": "QueueIndex",
          "sentence": "",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnNumber"
                  },
                  "parameters": [
                    "Object.Variable(QueueIndex)"
                  ]
                }
              ]
            }
          ],
          "expressionType": {
            "type": "expression"
          },
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "supplementaryInformation": "Sprite",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::InsertedBubbleBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Return the index of the inserted bubble in the queue.",
          "fullName": "Bubble index",
          "functionType": "Expression",
          "name": "BubbleIndex",
          "sentence": "",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnNumber"
                  },
                  "parameters": [
                    "Object.Variable(BubbleIndex)"
                  ]
                }
              ]
            }
          ],
          "expressionType": {
            "type": "expression"
          },
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "supplementaryInformation": "Sprite",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::InsertedBubbleBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Return the identifier of the gutter where the bubble is inserted.",
          "fullName": "Gutter identifier",
          "functionType": "Expression",
          "name": "GutterIdentifier",
          "sentence": "",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnNumber"
                  },
                  "parameters": [
                    "Object.Variable(GutterIdentifier)"
                  ]
                }
              ]
            }
          ],
          "expressionType": {
            "type": "expression"
          },
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "supplementaryInformation": "Sprite",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::InsertedBubbleBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        }
      ],
      "propertyDescriptors": [
        {
          "value": "",
          "type": "Behavior",
          "label": "Speed path movement",
          "description": "",
          "group": "",
          "extraInformation": [
            "CurvedMovement::SpeedPathMovement"
          ],
          "name": "SpeedPathMovement"
        },
        {
          "value": "32",
          "type": "Number",
          "unit": "Pixel",
          "label": "Bubble size",
          "description": "",
          "group": "",
          "extraInformation": [],
          "name": "BubbleSize"
        },
        {
          "value": "0.2",
          "type": "Number",
          "unit": "Second",
          "label": "Insertion duration",
          "description": "",
          "group": "",
          "extraInformation": [],
          "name": "InsertionDuration"
        }
      ],
      "sharedPropertyDescriptors": []
    },
    {
      "description": "Contain bubbles bonded to each other. Each end of the queue has a FSM for the combo movement.",
      "fullName": "Bubble queue",
      "name": "BubbleQueueBehavior",
      "objectType": "",
      "eventsFunctions": [
        {
          "description": "Update the bubble speed of the queue according to the state of the combo animation.",
          "fullName": "Update bubble speed",
          "functionType": "Action",
          "name": "SetBubblesSpeed",
          "sentence": "Update  the speed of _PARAM5_ from _PARAM0_ for the rewind animation in _PARAM2_",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "States are explained in doStepPreEvents."
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "ObjectStack::Contains"
                  },
                  "parameters": [
                    "",
                    "Gutter",
                    "ObjectStack",
                    "Object",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::Contains"
                  },
                  "parameters": [
                    "",
                    "Object",
                    "ObjectStack",
                    "BoardBubble",
                    ""
                  ]
                }
              ],
              "actions": [],
              "events": [
                {
                  "disabled": true,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "DebuggerTools::ConsoleLog"
                      },
                      "parameters": [
                        "ToString(Gutter.ObjectStack::HeightOf(Object)) + \": \" + Object.Behavior::PropertyTailState() + \" - \" + Object.Behavior::PropertyHeadState()",
                        "",
                        ""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Tail state have precedence over head state."
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"Idle\""
                      ]
                    }
                  ],
                  "actions": [],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "=",
                            "\"Idle\""
                          ]
                        }
                      ],
                      "actions": [],
                      "events": [
                        {
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [
                            {
                              "type": {
                                "inverted": true,
                                "value": "ObjectStack::HasOnTop"
                              },
                              "parameters": [
                                "",
                                "Gutter",
                                "ObjectStack",
                                "Object",
                                ""
                              ]
                            }
                          ],
                          "actions": [
                            {
                              "type": {
                                "value": "CurvedMovement::SpeedPathMovement::SetSpeed"
                              },
                              "parameters": [
                                "BoardBubble",
                                "SpeedPathMovement",
                                "=",
                                "0",
                                ""
                              ]
                            }
                          ]
                        },
                        {
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Gutter push"
                        },
                        {
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [
                            {
                              "type": {
                                "value": "ObjectStack::HasOnTop"
                              },
                              "parameters": [
                                "",
                                "Gutter",
                                "ObjectStack",
                                "Object",
                                ""
                              ]
                            }
                          ],
                          "actions": [],
                          "events": [
                            {
                              "type": "BuiltinCommonInstructions::Standard",
                              "conditions": [
                                {
                                  "type": {
                                    "value": "CurvedMovement::SpeedPathMovement::Speed"
                                  },
                                  "parameters": [
                                    "BoardBubble",
                                    "SpeedPathMovement",
                                    "<=",
                                    "Gutter.GutterBehavior::PushSpeed()",
                                    ""
                                  ]
                                }
                              ],
                              "actions": [
                                {
                                  "type": {
                                    "value": "CurvedMovement::SpeedPathMovement::AccelarateAt"
                                  },
                                  "parameters": [
                                    "BoardBubble",
                                    "SpeedPathMovement",
                                    "Gutter.GutterBehavior::PushSpeed()",
                                    "Gutter.GutterBehavior::PushAcceleration()",
                                    ""
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "BuiltinCommonInstructions::Standard",
                              "conditions": [
                                {
                                  "type": {
                                    "value": "CurvedMovement::SpeedPathMovement::Speed"
                                  },
                                  "parameters": [
                                    "BoardBubble",
                                    "SpeedPathMovement",
                                    ">",
                                    "Gutter.GutterBehavior::PushSpeed()",
                                    ""
                                  ]
                                }
                              ],
                              "actions": [
                                {
                                  "type": {
                                    "value": "CurvedMovement::SpeedPathMovement::SetSpeed"
                                  },
                                  "parameters": [
                                    "BoardBubble",
                                    "SpeedPathMovement",
                                    "=",
                                    "Gutter.GutterBehavior::PushSpeed()",
                                    ""
                                  ]
                                }
                              ]
                            },
                            {
                              "disabled": true,
                              "type": "BuiltinCommonInstructions::Standard",
                              "conditions": [],
                              "actions": [
                                {
                                  "type": {
                                    "value": "DebuggerTools::ConsoleLog"
                                  },
                                  "parameters": [
                                    "\"Push speed: \" + ToString(Gutter.GutterBehavior::PushSpeed())",
                                    "",
                                    ""
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Comment",
                      "color": {
                        "b": 109,
                        "g": 230,
                        "r": 255,
                        "textB": 0,
                        "textG": 0,
                        "textR": 0
                      },
                      "comment": "Keep the same speed."
                    },
                    {
                      "disabled": true,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "BuiltinCommonInstructions::Or"
                          },
                          "parameters": [],
                          "subInstructions": [
                            {
                              "type": {
                                "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                              },
                              "parameters": [
                                "Object",
                                "Behavior",
                                "=",
                                "\"JustSplit\""
                              ]
                            },
                            {
                              "type": {
                                "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                              },
                              "parameters": [
                                "Object",
                                "Behavior",
                                "=",
                                "\"WillMagnet\""
                              ]
                            }
                          ]
                        }
                      ],
                      "actions": []
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "=",
                            "\"StopOrTaillingPush\""
                          ]
                        }
                      ],
                      "actions": [],
                      "events": [
                        {
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [
                            {
                              "type": {
                                "inverted": true,
                                "value": "ObjectStack::HasOnTop"
                              },
                              "parameters": [
                                "",
                                "Gutter",
                                "ObjectStack",
                                "Object",
                                ""
                              ]
                            }
                          ],
                          "actions": [
                            {
                              "type": {
                                "value": "CurvedMovement::SpeedPathMovement::SetSpeed"
                              },
                              "parameters": [
                                "BoardBubble",
                                "SpeedPathMovement",
                                "=",
                                "0",
                                ""
                              ]
                            }
                          ]
                        },
                        {
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [
                            {
                              "type": {
                                "value": "ObjectStack::HasOnTop"
                              },
                              "parameters": [
                                "",
                                "Gutter",
                                "ObjectStack",
                                "Object",
                                ""
                              ]
                            }
                          ],
                          "actions": [
                            {
                              "type": {
                                "value": "CurvedMovement::SpeedPathMovement::SetSpeed"
                              },
                              "parameters": [
                                "BoardBubble",
                                "SpeedPathMovement",
                                "=",
                                "Gutter.GutterBehavior::PushSpeed()",
                                ""
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "=",
                            "\"HitStopBeforeIdle\""
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "CurvedMovement::SpeedPathMovement::SetSpeed"
                          },
                          "parameters": [
                            "BoardBubble",
                            "SpeedPathMovement",
                            "=",
                            "0",
                            ""
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "=",
                            "\"HitStopBeforeRewind\""
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "CurvedMovement::SpeedPathMovement::SetSpeed"
                          },
                          "parameters": [
                            "BoardBubble",
                            "SpeedPathMovement",
                            "=",
                            "0",
                            ""
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "=",
                            "\"Rewinding\""
                          ]
                        }
                      ],
                      "actions": [],
                      "events": [
                        {
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [
                            {
                              "type": {
                                "value": "ObjectStack::HasOnTop"
                              },
                              "parameters": [
                                "",
                                "Gutter",
                                "ObjectStack",
                                "Object",
                                ""
                              ]
                            }
                          ],
                          "actions": [
                            {
                              "type": {
                                "value": "CurvedMovement::SpeedPathMovement::AccelarateAt"
                              },
                              "parameters": [
                                "BoardBubble",
                                "SpeedPathMovement",
                                "Gutter.GutterBehavior::PushAcceleration()",
                                "Gutter.GutterBehavior::PushSpeed()",
                                ""
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "=",
                            "\"RewindImpact\""
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "CurvedMovement::SpeedPathMovement::SetSpeed"
                          },
                          "parameters": [
                            "BoardBubble",
                            "SpeedPathMovement",
                            "=",
                            "Object.Behavior::ImpactSpeed(Object.Behavior::PropertyHeadComboLevel())",
                            ""
                          ]
                        }
                      ],
                      "events": [
                        {
                          "disabled": true,
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "value": "DebuggerTools::ConsoleLog"
                              },
                              "parameters": [
                                "\"Combo level for the head imact: \" + ToString(Object.Behavior::PropertyHeadComboLevel())",
                                "",
                                ""
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Keep the same speed."
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"WillMagnet\""
                      ]
                    }
                  ],
                  "actions": []
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"JustSplit\""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "CurvedMovement::SpeedPathMovement::AccelarateAt"
                      },
                      "parameters": [
                        "BoardBubble",
                        "SpeedPathMovement",
                        "0",
                        "-Gutter.GutterBehavior::PushAcceleration()",
                        ""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"StopOrTaillingPush\""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "CurvedMovement::SpeedPathMovement::SetSpeed"
                      },
                      "parameters": [
                        "BoardBubble",
                        "SpeedPathMovement",
                        "=",
                        "0",
                        ""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"HitStopBeforeRewind\""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "CurvedMovement::SpeedPathMovement::SetSpeed"
                      },
                      "parameters": [
                        "BoardBubble",
                        "SpeedPathMovement",
                        "=",
                        "0",
                        ""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"HitStopEndBeforeRewind\""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "CurvedMovement::SpeedPathMovement::SetSpeed"
                      },
                      "parameters": [
                        "BoardBubble",
                        "SpeedPathMovement",
                        "=",
                        "Object.Behavior::ImpactSpeed(max(1, Object.Behavior::PropertyTailComboLevel() - 1))",
                        ""
                      ]
                    }
                  ],
                  "events": [
                    {
                      "disabled": true,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "value": "DebuggerTools::ConsoleLog"
                          },
                          "parameters": [
                            "\"Set speed for the tail for rewind: \" + ToString(Object.Behavior::ImpactSpeed(max(1, Object.Behavior::PropertyTailComboLevel() - 1)))",
                            "",
                            ""
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"Rewinding\""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "CurvedMovement::SpeedPathMovement::AccelarateAt"
                      },
                      "parameters": [
                        "BoardBubble",
                        "SpeedPathMovement",
                        "-Object.Behavior::PropertyRewindingSpeedMax()",
                        "-Object.Behavior::PropertyRewindingAcceleration()",
                        ""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"RewindImpact\""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "CurvedMovement::SpeedPathMovement::SetSpeed"
                      },
                      "parameters": [
                        "BoardBubble",
                        "SpeedPathMovement",
                        "=",
                        "Object.Behavior::ImpactSpeed(Object.Behavior::PropertyTailComboLevel())",
                        ""
                      ]
                    }
                  ],
                  "events": [
                    {
                      "disabled": true,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "value": "DebuggerTools::ConsoleLog"
                          },
                          "parameters": [
                            "\"Set speed for the tail impact: \" + ToString(Object.Behavior::ImpactSpeed(Object.Behavior::PropertyTailComboLevel()))",
                            "",
                            ""
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "disabled": true,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": true,
                        "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"Idle\""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "DebuggerTools::ConsoleLog"
                      },
                      "parameters": [
                        "\"Head speed:: \" + ToString(BoardBubble.SpeedPathMovement::Speed())",
                        "",
                        ""
                      ]
                    }
                  ]
                },
                {
                  "disabled": true,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": true,
                        "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"Idle\""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "DebuggerTools::ConsoleLog"
                      },
                      "parameters": [
                        "\"Tail speed:: \" + ToString(BoardBubble.SpeedPathMovement::Speed())",
                        "",
                        ""
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            },
            {
              "description": "Gutter",
              "name": "Gutter",
              "type": "objectList"
            },
            {
              "description": "Gutter behavior",
              "name": "GutterBehavior",
              "supplementaryInformation": "Smoothy::GutterBehavior",
              "type": "behavior"
            },
            {
              "description": "Object stack",
              "name": "ObjectStack",
              "supplementaryInformation": "ObjectStack::ObjectStack",
              "type": "behavior"
            },
            {
              "description": "Board bubble",
              "name": "BoardBubble",
              "type": "objectList"
            },
            {
              "description": "Speed path movement",
              "name": "SpeedPathMovement",
              "supplementaryInformation": "CurvedMovement::SpeedPathMovement",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "fullName": "",
          "functionType": "Action",
          "name": "doStepPreEvents",
          "sentence": "",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "Bubble queues have 2 finite state machines:\n- one for the queue tail\n- one for the queue head\n\nAs stated in the SetBubbleSpeed action, the tail state has precedence over the head state to choose the speed.\n\nThe states are the following:\n- Idle, there is no combo animation\n- JustSplit, the queue was split and the magnet check is not yet done or color don't match.\n- WillMagnet, the queues are matching but they keep their current speed during a small delay.\n- HitStopBeforeIdle, at the end of a combo, the queues are stopping for a small amount of time to put emphasis to the animation before starting back to push.\n- HitStopBeforeRewind, the queues are stopping for a small amount of time to put emphasis to the animation.\n- HitStopEndBeforeRewind, the end of the hit stop. The tailing queue start back at the previous impact speed.\n- Rewinding, the leading queue is going backward until it reaches its tailing queue.\n- RewindImpact, the queues are colliding, when combo are chained the tailing queue is given more and more speed at the impact.\n- StopOrTaillingPush, change the speed before going back to the idle state."
            },
            {
              "colorB": 228,
              "colorG": 176,
              "colorR": 74,
              "creationTime": 0,
              "name": "Tail state",
              "source": "",
              "type": "BuiltinCommonInstructions::Group",
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"StopOrTaillingPush\""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::SetTailState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"Idle\"",
                        ""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"RewindImpact\""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::SetTailState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"AfterImpact\"",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "ResetObjectTimer"
                      },
                      "parameters": [
                        "Object",
                        "\"TimeFromTailImpact\""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"HitStopEndBeforeRewind\""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::SetTailState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"Rewinding\"",
                        ""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "CompareObjectTimer"
                      },
                      "parameters": [
                        "Object",
                        "\"TimeFromTailImpact\"",
                        ">=",
                        "Object.Behavior::PropertyRewindDelay()"
                      ]
                    }
                  ],
                  "actions": [],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "=",
                            "\"JustSplit\""
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::SetTailState"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "=",
                            "\"Idle\"",
                            ""
                          ]
                        },
                        {
                          "type": {
                            "value": "RemoveObjectTimer"
                          },
                          "parameters": [
                            "Object",
                            "\"TimeFromTailImpact\""
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "=",
                            "\"AfterImpact\""
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::SetTailState"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "=",
                            "\"StopOrTaillingPush\"",
                            ""
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "=",
                            "\"WillMagnet\""
                          ]
                        },
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::PropertyTailComboLevel"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            ">",
                            "1"
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::SetTailState"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "=",
                            "\"HitStopBeforeRewind\"",
                            ""
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "CompareObjectTimer"
                      },
                      "parameters": [
                        "Object",
                        "\"TimeFromTailImpact\"",
                        ">=",
                        "Object.Behavior::PropertyRewindDelay() + Object.Behavior::PropertyHitStopBeforeRewindDuration()"
                      ]
                    }
                  ],
                  "actions": [],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "=",
                            "\"HitStopBeforeRewind\""
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::SetTailState"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "=",
                            "\"HitStopEndBeforeRewind\"",
                            ""
                          ]
                        },
                        {
                          "type": {
                            "value": "RemoveObjectTimer"
                          },
                          "parameters": [
                            "Object",
                            "\"TimeFromTailImpact\""
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Comment",
                      "color": {
                        "b": 109,
                        "g": 230,
                        "r": 255,
                        "textB": 0,
                        "textG": 0,
                        "textR": 0
                      },
                      "comment": "There is no hit-stop before the first rewinding but the total delay is still the same."
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "=",
                            "\"WillMagnet\""
                          ]
                        },
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::PropertyTailComboLevel"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "<=",
                            "1"
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::SetTailState"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "=",
                            "\"HitStopEndBeforeRewind\"",
                            ""
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "parameters": []
            },
            {
              "colorB": 228,
              "colorG": 176,
              "colorR": 74,
              "creationTime": 0,
              "name": "Head state",
              "source": "",
              "type": "BuiltinCommonInstructions::Group",
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"StopOrTaillingPush\""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::SetHeadState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"Idle\"",
                        ""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"RewindImpact\""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::SetHeadState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"AfterImpact\"",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "ResetObjectTimer"
                      },
                      "parameters": [
                        "Object",
                        "\"TimeFromHeadImpact\""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "CompareObjectTimer"
                      },
                      "parameters": [
                        "Object",
                        "\"TimeFromHeadImpact\"",
                        ">=",
                        "Object.Behavior::PropertyRewindDelay()"
                      ]
                    }
                  ],
                  "actions": [],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "=",
                            "\"AfterImpact\""
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::SetHeadState"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "=",
                            "\"HitStopBeforeIdle\"",
                            ""
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "=",
                            "\"WillMagnet\""
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::SetHeadState"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "=",
                            "\"HitStopBeforeRewind\"",
                            ""
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"HitStopBeforeRewind\""
                      ]
                    },
                    {
                      "type": {
                        "value": "CompareObjectTimer"
                      },
                      "parameters": [
                        "Object",
                        "\"TimeFromHeadImpact\"",
                        ">=",
                        "Object.Behavior::PropertyRewindDelay() + Object.Behavior::PropertyHitStopBeforeRewindDuration()"
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::SetHeadState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"Rewinding\"",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "RemoveObjectTimer"
                      },
                      "parameters": [
                        "Object",
                        "\"TimeFromHeadImpact\""
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"HitStopBeforeIdle\""
                      ]
                    },
                    {
                      "type": {
                        "value": "CompareObjectTimer"
                      },
                      "parameters": [
                        "Object",
                        "\"TimeFromHeadImpact\"",
                        ">=",
                        "Object.Behavior::PropertyRewindDelay() + Object.Behavior::PropertyHitStopAfterComboDuration()"
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::SetHeadState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"Idle\"",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "RemoveObjectTimer"
                      },
                      "parameters": [
                        "Object",
                        "\"TimeFromHeadImpact\""
                      ]
                    }
                  ]
                }
              ],
              "parameters": []
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Return the speed to give to the queue when it collides after a rewind.",
          "fullName": "Impact speed",
          "functionType": "Expression",
          "name": "ImpactSpeed",
          "sentence": "",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnNumber"
                  },
                  "parameters": [
                    "max(-Object.Behavior::PropertyImpactSpeedMax(), -Object.Behavior:: PropertyImpactSpeedGain() * GetArgumentAsNumber(\"ComboLevel\"))"
                  ]
                }
              ]
            }
          ],
          "expressionType": {
            "type": "expression"
          },
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            },
            {
              "description": "Combo level",
              "name": "ComboLevel",
              "type": "expression"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Change the state of the tail according to whether its color matches the tailing queue head.",
          "fullName": "Tail is matching",
          "functionType": "Action",
          "name": "SetTailMatching",
          "sentence": "_PARAM0_ tail is matching: _PARAM2_",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "GetArgumentAsBoolean"
                  },
                  "parameters": [
                    "\"ShouldRewind\""
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Or"
                  },
                  "parameters": [],
                  "subInstructions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"Idle\""
                      ]
                    },
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"AfterImpact\""
                      ]
                    },
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"JustSplit\""
                      ]
                    }
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetPropertyTailState"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "\"WillMagnet\""
                  ]
                },
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetPropertyTailComboLevel"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "+",
                    "1"
                  ]
                },
                {
                  "type": {
                    "value": "ResetObjectTimer"
                  },
                  "parameters": [
                    "Object",
                    "\"TimeFromTailImpact\""
                  ]
                }
              ],
              "events": [
                {
                  "disabled": true,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "DebuggerTools::ConsoleLog"
                      },
                      "parameters": [
                        "\"Tail combo: \" + ToString(Object.Behavior::TailComboLevel())",
                        "",
                        ""
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "inverted": true,
                    "value": "GetArgumentAsBoolean"
                  },
                  "parameters": [
                    "\"ShouldRewind\""
                  ]
                },
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "\"Rewinding\""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetPropertyTailComboLevel"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "0"
                  ]
                },
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetTailIdle"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    ""
                  ]
                }
              ],
              "events": [
                {
                  "disabled": true,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "DebuggerTools::ConsoleLog"
                      },
                      "parameters": [
                        "\"Reset tail combo level\"",
                        "",
                        ""
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            },
            {
              "description": "Should rewind",
              "name": "ShouldRewind",
              "type": "yesorno"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Change the state of the head according to whether its color matches the leading queue tail.",
          "fullName": "Head is matching",
          "functionType": "Action",
          "name": "SetHeadMatching",
          "sentence": "_PARAM0_ head is matching: _PARAM2_",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "GetArgumentAsBoolean"
                  },
                  "parameters": [
                    "\"ShouldRewind\""
                  ]
                },
                {
                  "type": {
                    "value": "BuiltinCommonInstructions::Or"
                  },
                  "parameters": [],
                  "subInstructions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"Idle\""
                      ]
                    },
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"HitStopBeforeIdle\""
                      ]
                    },
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"AfterImpact\""
                      ]
                    },
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "\"JustSplit\""
                      ]
                    }
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetPropertyHeadState"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "\"WillMagnet\""
                  ]
                },
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetPropertyHeadComboLevel"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "+",
                    "1"
                  ]
                },
                {
                  "type": {
                    "value": "ResetObjectTimer"
                  },
                  "parameters": [
                    "Object",
                    "\"TimeFromHeadImpact\""
                  ]
                }
              ],
              "events": [
                {
                  "disabled": true,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "DebuggerTools::ConsoleLog"
                      },
                      "parameters": [
                        "\"Head combo: \" + ToString(Object.Behavior::HeadComboLevel())",
                        "",
                        ""
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "inverted": true,
                    "value": "GetArgumentAsBoolean"
                  },
                  "parameters": [
                    "\"ShouldRewind\""
                  ]
                },
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "\"Rewinding\""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetPropertyHeadComboLevel"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "0"
                  ]
                },
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetHeadIdle"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    ""
                  ]
                }
              ],
              "events": [
                {
                  "disabled": true,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "DebuggerTools::ConsoleLog"
                      },
                      "parameters": [
                        "\"Reset head combo level\"",
                        "",
                        ""
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            },
            {
              "description": "Should rewind",
              "name": "ShouldRewind",
              "type": "yesorno"
            }
          ],
          "objectGroups": []
        },
        {
          "fullName": "Tail is matching",
          "functionType": "Condition",
          "name": "IsTailMatching",
          "sentence": "_PARAM0_ tail is matching",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "!=",
                    "\"Idle\""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnBoolean"
                  },
                  "parameters": [
                    "True"
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "fullName": "Head is matching",
          "functionType": "Condition",
          "name": "IsHeadMatching",
          "sentence": "_PARAM0_ head is matching",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "!=",
                    "\"Idle\""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnBoolean"
                  },
                  "parameters": [
                    "True"
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Change the state of the tail when the queue was split because bubbles exploded.",
          "fullName": "Tail just split",
          "functionType": "Action",
          "name": "SetTailJustSplit",
          "sentence": "Change tail state of _PARAM0_ to just split",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetPropertyTailState"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "\"JustSplit\""
                  ]
                },
                {
                  "type": {
                    "value": "ResetObjectTimer"
                  },
                  "parameters": [
                    "Object",
                    "\"TimeFromTailImpact\""
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Change the state of the head when the queue was split because bubbles exploded.",
          "fullName": "Head just split",
          "functionType": "Action",
          "name": "SetHeadJustSplit",
          "sentence": "Change head state of _PARAM0_ to just split",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetHeadIdle"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    ""
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Change the state of the tail when the queue collided its tailing queue and bubbles exploded.",
          "fullName": "Tail just hit",
          "functionType": "Action",
          "name": "SetTailJustHit",
          "sentence": "Change tail state of _PARAM0_ to just hit",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "\"Rewinding\""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetPropertyTailState"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "\"RewindImpact\""
                  ]
                }
              ],
              "events": [
                {
                  "disabled": true,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "DebuggerTools::ConsoleLog"
                      },
                      "parameters": [
                        "\"Tail just hit\"",
                        "",
                        ""
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Change the state of the head when the queue was collided by its leading queue and bubbles exploded.",
          "fullName": "Head just hit",
          "functionType": "Action",
          "name": "SetHeadJustHit",
          "sentence": "Change head state of _PARAM0_ to just hit",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::PropertyHeadState"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "\"Rewinding\""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetPropertyHeadState"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "\"RewindImpact\""
                  ]
                }
              ],
              "events": [
                {
                  "disabled": true,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "DebuggerTools::ConsoleLog"
                      },
                      "parameters": [
                        "\"Head just hit\"",
                        "",
                        ""
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Change the state of the tail when the queue merge with anothe one.",
          "fullName": "Just merged",
          "functionType": "Action",
          "name": "SetJustMerged",
          "sentence": "Change tail state of _PARAM0_ after a merge of a queue with tail state: _PARAM2_, tail combo level: _PARAM3_ and time from tail impact: _PARAM4_",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "The leading queue rewind back to the tailing queue and they merged (because there were only 2 bubbles of the same color)."
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "\"Rewinding\""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetPropertyTailState"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "\"RewindImpact\""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "The tailing queue reached the leading queue and they merged."
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "inverted": true,
                    "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "\"Rewinding\""
                  ]
                },
                {
                  "type": {
                    "inverted": true,
                    "value": "Smoothy::BubbleQueueBehavior::PropertyTailState"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "\"RewindImpact\""
                  ]
                }
              ],
              "actions": [],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Set back the tail state."
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::SetTailState"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "GetArgumentAsString(\"TailState\")",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "Smoothy::BubbleQueueBehavior::SetTailComboLevel"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "GetArgumentAsNumber(\"TailComboLevel\")",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "RemoveObjectTimer"
                      },
                      "parameters": [
                        "Object",
                        "\"TimeFromTailImpact\""
                      ]
                    }
                  ],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "CompareArgumentAsNumber"
                          },
                          "parameters": [
                            "\"TimeFromTailImpact\"",
                            ">=",
                            "0"
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "AdvancedTimer::SetObjectTimerElapsedTime"
                          },
                          "parameters": [
                            "",
                            "=",
                            "GetArgumentAsNumber(\"TimeFromTailImpact\")",
                            "Object",
                            "\"TimeFromTailImpact\"",
                            ""
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            },
            {
              "description": "Tail state",
              "name": "TailState",
              "type": "string"
            },
            {
              "description": "Tail combo level",
              "name": "TailComboLevel",
              "type": "expression"
            },
            {
              "description": "Time from tail impact",
              "name": "TimeFromTailImpact",
              "type": "expression"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Change the state of the tail to \"StopOrTaillingPush\" to go back to idle.",
          "fullName": "Tail idle",
          "functionType": "Action",
          "name": "SetTailIdle",
          "private": true,
          "sentence": "Change tail state of _PARAM0_ to idle",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetPropertyTailState"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "\"StopOrTaillingPush\""
                  ]
                },
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetPropertyTailComboLevel"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "0"
                  ]
                },
                {
                  "type": {
                    "value": "RemoveObjectTimer"
                  },
                  "parameters": [
                    "Object",
                    "\"TimeFromTailImpact\""
                  ]
                }
              ],
              "events": [
                {
                  "disabled": true,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "DebuggerTools::ConsoleLog"
                      },
                      "parameters": [
                        "\" --> Idle\"",
                        "",
                        ""
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Change the state of the head to \"StopOrTaillingPush\" to go back to idle.",
          "fullName": "Head idle",
          "functionType": "Action",
          "name": "SetHeadIdle",
          "private": true,
          "sentence": "Change head state of _PARAM0_ to idle",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetPropertyHeadState"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "\"StopOrTaillingPush\""
                  ]
                },
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetPropertyHeadComboLevel"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "0"
                  ]
                },
                {
                  "type": {
                    "value": "RemoveObjectTimer"
                  },
                  "parameters": [
                    "Object",
                    "\"TimeFromHeadImpact\""
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "the tail state of the queue. It should only be used by this extension when merging or splitting queues.",
          "fullName": "Tail state",
          "functionType": "ExpressionAndCondition",
          "group": "Bubble queue (private)",
          "name": "TailState",
          "sentence": "the tail state",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnString"
                  },
                  "parameters": [
                    "Object.Behavior::PropertyTailState()"
                  ]
                }
              ]
            }
          ],
          "expressionType": {
            "supplementaryInformation": "[\"Idle\",\"JustSplit\",\"HitStop\",\"HitStopEnd\",\"Rewinding\"]",
            "type": "stringWithSelector"
          },
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "fullName": "",
          "functionType": "ActionWithOperator",
          "getterName": "TailState",
          "name": "SetTailState",
          "private": true,
          "sentence": "",
          "events": [
            {
              "disabled": true,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "DebuggerTools::ConsoleLog"
                  },
                  "parameters": [
                    "\"Tail: \" + Object. Behavior::PropertyTailState() + \" --> \" + GetArgumentAsString(\"Value\")",
                    "",
                    ""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetPropertyTailState"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "GetArgumentAsString(\"Value\")"
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "the head state of the queue. It should only be used by this extension when merging or splitting queues.",
          "fullName": "Head state",
          "functionType": "ExpressionAndCondition",
          "group": "Bubble queue (private)",
          "name": "HeadState",
          "sentence": "the head state",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnString"
                  },
                  "parameters": [
                    "Object.Behavior::PropertyHeadState()"
                  ]
                }
              ]
            }
          ],
          "expressionType": {
            "supplementaryInformation": "[\"Idle\",\"JustSplit\",\"HitStop\"]",
            "type": "stringWithSelector"
          },
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "fullName": "",
          "functionType": "ActionWithOperator",
          "getterName": "HeadState",
          "name": "SetHeadState",
          "private": true,
          "sentence": "",
          "events": [
            {
              "disabled": true,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "DebuggerTools::ConsoleLog"
                  },
                  "parameters": [
                    "\"Head: \" + Object. Behavior::PropertyHeadState() + \" --> \" + GetArgumentAsString(\"Value\")",
                    "",
                    ""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetPropertyHeadState"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "GetArgumentAsString(\"Value\")"
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "the tail combo level.",
          "fullName": "Tail combo level",
          "functionType": "ExpressionAndCondition",
          "name": "TailComboLevel",
          "sentence": "the tail combo level",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnNumber"
                  },
                  "parameters": [
                    "Object.Behavior::PropertyTailComboLevel()"
                  ]
                }
              ]
            }
          ],
          "expressionType": {
            "type": "expression"
          },
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "fullName": "",
          "functionType": "ActionWithOperator",
          "getterName": "TailComboLevel",
          "name": "SetTailComboLevel",
          "sentence": "",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetPropertyTailComboLevel"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "GetArgumentAsNumber(\"Value\")"
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "the head combo level.",
          "fullName": "Head combo level",
          "functionType": "ExpressionAndCondition",
          "name": "HeadComboLevel",
          "sentence": "the head combo level",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnNumber"
                  },
                  "parameters": [
                    "Object.Behavior::PropertyHeadComboLevel()"
                  ]
                }
              ]
            }
          ],
          "expressionType": {
            "type": "expression"
          },
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "fullName": "",
          "functionType": "ActionWithOperator",
          "getterName": "HeadComboLevel",
          "name": "SetHeadComboLevel",
          "sentence": "",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::BubbleQueueBehavior::SetPropertyHeadComboLevel"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "GetArgumentAsNumber(\"Value\")"
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        }
      ],
      "propertyDescriptors": [
        {
          "value": "Idle",
          "type": "Choice",
          "label": "Tail state",
          "description": "",
          "group": "",
          "extraInformation": [
            "Idle",
            "JustSplit",
            "StopOrTaillingPush",
            "WillMagnet",
            "HitStop",
            "HitStopEnd",
            "Rewinding",
            "RewindImpact"
          ],
          "hidden": true,
          "name": "TailState"
        },
        {
          "value": "Idle",
          "type": "Choice",
          "label": "Head state",
          "description": "",
          "group": "",
          "extraInformation": [
            "Idle",
            "JustSplit",
            "StopOrTaillingPush",
            "WillMagnet",
            "HitStop",
            "Rewinding",
            "RewindImpact"
          ],
          "hidden": true,
          "name": "HeadState"
        },
        {
          "value": "0",
          "type": "Number",
          "unit": "Dimensionless",
          "label": "Tail combo level",
          "description": "",
          "group": "",
          "extraInformation": [],
          "hidden": true,
          "name": "TailComboLevel"
        },
        {
          "value": "0",
          "type": "Number",
          "unit": "Dimensionless",
          "label": "Head combo level",
          "description": "",
          "group": "",
          "extraInformation": [],
          "hidden": true,
          "name": "HeadComboLevel"
        },
        {
          "value": "444",
          "type": "Number",
          "unit": "PixelSpeed",
          "label": "Rewinding maximum speed",
          "description": "",
          "group": "Speed",
          "extraInformation": [],
          "name": "RewindingSpeedMax"
        },
        {
          "value": "1333",
          "type": "Number",
          "unit": "PixelAcceleration",
          "label": "Rewinding acceleration",
          "description": "",
          "group": "Speed",
          "extraInformation": [],
          "name": "RewindingAcceleration"
        },
        {
          "value": "0.3",
          "type": "Number",
          "unit": "Second",
          "label": "Rewind delay",
          "description": "Before the hit-stop",
          "group": "Hit-stop",
          "extraInformation": [],
          "name": "RewindDelay"
        },
        {
          "value": "0.1",
          "type": "Number",
          "unit": "Second",
          "label": "Hit-stop duration before rewinding",
          "description": "",
          "group": "Hit-stop",
          "extraInformation": [],
          "name": "HitStopBeforeRewindDuration"
        },
        {
          "value": "0.4",
          "type": "Number",
          "unit": "Second",
          "label": "Hit-stop at the end of a combo",
          "description": "",
          "group": "Hit-stop",
          "extraInformation": [],
          "name": "HitStopAfterComboDuration"
        },
        {
          "value": "133.3",
          "type": "Number",
          "unit": "PixelSpeed",
          "label": "Impact speed gain at each combo level",
          "description": "",
          "group": "Speed",
          "extraInformation": [],
          "name": "ImpactSpeedGain"
        },
        {
          "value": "400",
          "type": "Number",
          "unit": "PixelSpeed",
          "label": "Impact speed maximum",
          "description": "",
          "group": "Speed",
          "extraInformation": [],
          "name": "ImpactSpeedMax"
        }
      ],
      "sharedPropertyDescriptors": []
    },
    {
      "description": "Generate bubbles to add in its gutter.",
      "fullName": "Spawner",
      "name": "SpwanerBehavior",
      "objectType": "",
      "eventsFunctions": [
        {
          "description": "Create and stack bubbles. Bubbles are created by group of 1 or 2 bubbles of the same color. 2 groups with the same color can follow each other which create a smaller chance of bigger groups.",
          "fullName": "Refill",
          "functionType": "Action",
          "name": "Refill",
          "sentence": "Refill _PARAM0_ with _PARAM2_",
          "events": [
            {
              "colorB": 228,
              "colorG": 176,
              "colorR": 74,
              "creationTime": 0,
              "name": "Debug",
              "source": "",
              "type": "BuiltinCommonInstructions::Group",
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Enable this event to test the combos."
                },
                {
                  "disabled": true,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "ObjectStack::ObjectStack::Height"
                      },
                      "parameters": [
                        "Object",
                        "ObjectStack",
                        "<",
                        "4",
                        ""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "ModVarScene"
                      },
                      "parameters": [
                        "index",
                        "=",
                        "0"
                      ]
                    }
                  ],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Repeat",
                      "repeatExpression": "2",
                      "conditions": [],
                      "actions": [],
                      "events": [
                        {
                          "type": "BuiltinCommonInstructions::Repeat",
                          "repeatExpression": "4",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "value": "Create"
                              },
                              "parameters": [
                                "",
                                "BoardBubble",
                                "Object.X()",
                                "Object.Y()",
                                ""
                              ]
                            },
                            {
                              "type": {
                                "value": "Create"
                              },
                              "parameters": [
                                "",
                                "BoardBubble",
                                "Object.X()",
                                "Object.Y()",
                                ""
                              ]
                            },
                            {
                              "type": {
                                "value": "CurvedMovement::SpeedPathMovement::SetPath"
                              },
                              "parameters": [
                                "BoardBubble",
                                "SpeedPathMovement",
                                "Object.Behavior::PathName()",
                                "1",
                                "",
                                ""
                              ]
                            },
                            {
                              "type": {
                                "value": "AnimatableCapability::AnimatableBehavior::SetIndex"
                              },
                              "parameters": [
                                "BoardBubble",
                                "Animation",
                                "=",
                                "Variable(index)"
                              ]
                            },
                            {
                              "type": {
                                "value": "ObjectStack::ObjectStack::Insert"
                              },
                              "parameters": [
                                "Object",
                                "ObjectStack",
                                "BoardBubble",
                                "0",
                                ""
                              ]
                            },
                            {
                              "type": {
                                "value": "ModVarScene"
                              },
                              "parameters": [
                                "index",
                                "+",
                                "1"
                              ]
                            }
                          ]
                        },
                        {
                          "type": "BuiltinCommonInstructions::Repeat",
                          "repeatExpression": "4",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "value": "ModVarScene"
                              },
                              "parameters": [
                                "index",
                                "-",
                                "1"
                              ]
                            },
                            {
                              "type": {
                                "value": "Create"
                              },
                              "parameters": [
                                "",
                                "BoardBubble",
                                "Object.X()",
                                "Object.Y()",
                                ""
                              ]
                            },
                            {
                              "type": {
                                "value": "Create"
                              },
                              "parameters": [
                                "",
                                "BoardBubble",
                                "Object.X()",
                                "Object.Y()",
                                ""
                              ]
                            },
                            {
                              "type": {
                                "value": "CurvedMovement::SpeedPathMovement::SetPath"
                              },
                              "parameters": [
                                "BoardBubble",
                                "SpeedPathMovement",
                                "Object.Behavior::PathName()",
                                "1",
                                "",
                                ""
                              ]
                            },
                            {
                              "type": {
                                "value": "AnimatableCapability::AnimatableBehavior::SetIndex"
                              },
                              "parameters": [
                                "BoardBubble",
                                "Animation",
                                "=",
                                "Variable(index)"
                              ]
                            },
                            {
                              "type": {
                                "value": "ObjectStack::ObjectStack::Insert"
                              },
                              "parameters": [
                                "Object",
                                "ObjectStack",
                                "BoardBubble",
                                "0",
                                ""
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "parameters": []
            },
            {
              "infiniteLoopWarning": true,
              "type": "BuiltinCommonInstructions::While",
              "whileConditions": [
                {
                  "type": {
                    "value": "ObjectStack::ObjectStack::Height"
                  },
                  "parameters": [
                    "Object",
                    "ObjectStack",
                    "<",
                    "4",
                    ""
                  ]
                }
              ],
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "ModVarScene"
                  },
                  "parameters": [
                    "randomColorIndex",
                    "=",
                    "Random(Object.Behavior::ColorCount() - 1)"
                  ]
                }
              ],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Repeat",
                  "repeatExpression": "RandomInRange(1, 2)",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "Create"
                      },
                      "parameters": [
                        "",
                        "BoardBubble",
                        "Object.X()",
                        "Object.Y()",
                        "\"\""
                      ]
                    },
                    {
                      "type": {
                        "value": "CurvedMovement::SpeedPathMovement::SetPath"
                      },
                      "parameters": [
                        "BoardBubble",
                        "SpeedPathMovement",
                        "Object.Behavior::PathName()",
                        "1",
                        "",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "AnimatableCapability::AnimatableBehavior::SetIndex"
                      },
                      "parameters": [
                        "BoardBubble",
                        "Animation",
                        "=",
                        "Variable(randomColorIndex)"
                      ]
                    },
                    {
                      "type": {
                        "value": "ObjectStack::ObjectStack::Insert"
                      },
                      "parameters": [
                        "Object",
                        "ObjectStack",
                        "BoardBubble",
                        "0",
                        ""
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::SpwanerBehavior",
              "type": "behavior"
            },
            {
              "description": "Board bubble",
              "name": "BoardBubble",
              "supplementaryInformation": "Sprite",
              "type": "objectList"
            },
            {
              "description": "Speed path movement",
              "name": "SpeedPathMovement",
              "supplementaryInformation": "CurvedMovement::SpeedPathMovement",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Check if there is enough room at the beginning of the gutter to spawn a new bubble.",
          "fullName": "Can spawn bubble",
          "functionType": "Condition",
          "name": "CanSpawnBubble",
          "sentence": "_PARAM0_ can spawn _PARAM6_ into _PARAM4_ of _PARAM2_",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "LinkedObjects::PickObjectsLinkedTo"
                  },
                  "parameters": [
                    "",
                    "Gutter",
                    "Object",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::HasOnTop"
                  },
                  "parameters": [
                    "",
                    "Gutter",
                    "ObjectStack",
                    "BubbleQueue",
                    ""
                  ]
                }
              ],
              "actions": [],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "ObjectStack::HasOnTop"
                      },
                      "parameters": [
                        "",
                        "BubbleQueue",
                        "ObjectStack",
                        "BoardBubble",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "CurvedMovement::SpeedPathMovement::PositionOnPath"
                      },
                      "parameters": [
                        "BoardBubble",
                        "SpeedPathMovement",
                        ">=",
                        "Object.Behavior::PropertyBubbleSize()",
                        ""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetReturnBoolean"
                      },
                      "parameters": [
                        "True"
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "ObjectStack::ObjectStack::IsEmpty"
                      },
                      "parameters": [
                        "BubbleQueue",
                        "ObjectStack",
                        "ObjectStack"
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetReturnBoolean"
                      },
                      "parameters": [
                        "True"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::SpwanerBehavior",
              "type": "behavior"
            },
            {
              "description": "Gutter",
              "name": "Gutter",
              "type": "objectList"
            },
            {
              "description": "Object stack",
              "name": "ObjectStack",
              "supplementaryInformation": "ObjectStack::ObjectStack",
              "type": "behavior"
            },
            {
              "description": "Bubble queue",
              "name": "BubbleQueue",
              "type": "objectList"
            },
            {
              "description": "Object stack",
              "name": "ObjectStack",
              "supplementaryInformation": "ObjectStack::ObjectStack",
              "type": "behavior"
            },
            {
              "description": "Board bubble",
              "name": "BoardBubble",
              "supplementaryInformation": "Sprite",
              "type": "objectList"
            },
            {
              "description": "Speed path movement",
              "name": "SpeedPathMovement",
              "supplementaryInformation": "CurvedMovement::SpeedPathMovement",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Spawn a bubble at the gutter beginning.",
          "fullName": "Spawn bubble",
          "functionType": "Action",
          "name": "SpawnBubble",
          "sentence": "_PARAM0_ spawn _PARAM7_ into _PARAM5_ of _PARAM2_",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::SpwanerBehavior::Refill"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "BoardBubble",
                    "SpeedPathMovement",
                    ""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "LinkedObjects::PickObjectsLinkedTo"
                  },
                  "parameters": [
                    "",
                    "Gutter",
                    "Object",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::HasOnTop"
                  },
                  "parameters": [
                    "",
                    "Gutter",
                    "ObjectStack",
                    "BubbleQueue",
                    ""
                  ]
                }
              ],
              "actions": [],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "ObjectStack::HasOnTop"
                      },
                      "parameters": [
                        "",
                        "BubbleQueue",
                        "ObjectStack",
                        "BoardBubble",
                        ""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "ModVarScene"
                      },
                      "parameters": [
                        "lastBubblePathPosition",
                        "=",
                        "BoardBubble.SpeedPathMovement::PositionOnPath()"
                      ]
                    },
                    {
                      "type": {
                        "value": "ModVarScene"
                      },
                      "parameters": [
                        "lastBubbleSpeed",
                        "=",
                        "BoardBubble.SpeedPathMovement::Speed()"
                      ]
                    }
                  ],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "AjoutObjConcern"
                          },
                          "parameters": [
                            "",
                            "BoardBubble"
                          ]
                        },
                        {
                          "type": {
                            "value": "ObjectStack::HasOnTop"
                          },
                          "parameters": [
                            "",
                            "Object",
                            "ObjectStack",
                            "BoardBubble",
                            ""
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "ObjectStack::ObjectStack::Remove"
                          },
                          "parameters": [
                            "Object",
                            "ObjectStack",
                            "BoardBubble",
                            ""
                          ]
                        },
                        {
                          "type": {
                            "value": "ObjectStack::ObjectStack::AddOnTop"
                          },
                          "parameters": [
                            "BubbleQueue",
                            "ObjectStack",
                            "BoardBubble",
                            ""
                          ]
                        },
                        {
                          "type": {
                            "value": "CurvedMovement::SpeedPathMovement::SetPositionOnPath"
                          },
                          "parameters": [
                            "BoardBubble",
                            "SpeedPathMovement",
                            "=",
                            "Variable(lastBubblePathPosition) - Object.Behavior::PropertyBubbleSize()",
                            ""
                          ]
                        },
                        {
                          "type": {
                            "value": "CurvedMovement::SpeedPathMovement::SetSpeed"
                          },
                          "parameters": [
                            "BoardBubble",
                            "SpeedPathMovement",
                            "=",
                            "Variable(lastBubbleSpeed)",
                            ""
                          ]
                        },
                        {
                          "type": {
                            "value": "Smoothy::SpwanerBehavior::SetSharedPropertySpawnedBubbleCount"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "+",
                            "1"
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "ObjectStack::ObjectStack::IsEmpty"
                      },
                      "parameters": [
                        "BubbleQueue",
                        "ObjectStack",
                        "ObjectStack"
                      ]
                    }
                  ],
                  "actions": [],
                  "events": [
                    {
                      "type": "BuiltinCommonInstructions::Comment",
                      "color": {
                        "b": 109,
                        "g": 230,
                        "r": 255,
                        "textB": 0,
                        "textG": 0,
                        "textR": 0
                      },
                      "comment": "Add the first bubble with some speed because it would have been detected as being rewinding otherwise."
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "ObjectStack::HasOnTop"
                          },
                          "parameters": [
                            "",
                            "Object",
                            "ObjectStack",
                            "BoardBubble",
                            ""
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "ObjectStack::ObjectStack::Remove"
                          },
                          "parameters": [
                            "Object",
                            "ObjectStack",
                            "BoardBubble",
                            ""
                          ]
                        },
                        {
                          "type": {
                            "value": "ObjectStack::ObjectStack::AddOnTop"
                          },
                          "parameters": [
                            "BubbleQueue",
                            "ObjectStack",
                            "BoardBubble",
                            ""
                          ]
                        },
                        {
                          "type": {
                            "value": "Smoothy::SpwanerBehavior::SetSharedPropertySpawnedBubbleCount"
                          },
                          "parameters": [
                            "Object",
                            "Behavior",
                            "+",
                            "1"
                          ]
                        },
                        {
                          "type": {
                            "value": "CurvedMovement::SpeedPathMovement::SetSpeed"
                          },
                          "parameters": [
                            "BoardBubble",
                            "SpeedPathMovement",
                            "=",
                            "Gutter.GutterBehavior::PushSpeed()",
                            ""
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "disabled": true,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "DebuggerTools::ConsoleLog"
                  },
                  "parameters": [
                    "\"Spawned bubbles: \" + VariableString(SpawnedBubbleCount)",
                    "",
                    ""
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::SpwanerBehavior",
              "type": "behavior"
            },
            {
              "description": "Gutter",
              "name": "Gutter",
              "type": "objectList"
            },
            {
              "description": "Gutter behavior",
              "name": "GutterBehavior",
              "supplementaryInformation": "Smoothy::GutterBehavior",
              "type": "behavior"
            },
            {
              "description": "Object stack",
              "name": "ObjectStack",
              "supplementaryInformation": "ObjectStack::ObjectStack",
              "type": "behavior"
            },
            {
              "description": "Bubble queue",
              "name": "BubbleQueue",
              "type": "objectList"
            },
            {
              "description": "Object stack",
              "name": "ObjectStack",
              "supplementaryInformation": "ObjectStack::ObjectStack",
              "type": "behavior"
            },
            {
              "description": "Board bubble",
              "name": "BoardBubble",
              "supplementaryInformation": "Sprite",
              "type": "objectList"
            },
            {
              "description": "Speed path movement",
              "name": "SpeedPathMovement",
              "supplementaryInformation": "CurvedMovement::SpeedPathMovement",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Check if a bubble was rewinded to the beginning of the path and should go back inside the spawner.",
          "fullName": "Can unspawn bubble",
          "functionType": "Condition",
          "name": "CanUnspawnBubble",
          "sentence": "_PARAM0_ can unspawn _PARAM6_ from _PARAM4_ of _PARAM2_",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "LinkedObjects::PickObjectsLinkedTo"
                  },
                  "parameters": [
                    "",
                    "Gutter",
                    "Object",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::HasOnTop"
                  },
                  "parameters": [
                    "",
                    "Gutter",
                    "ObjectStack",
                    "BubbleQueue",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::HasOnTop"
                  },
                  "parameters": [
                    "",
                    "BubbleQueue",
                    "ObjectStack",
                    "BoardBubble",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "CurvedMovement::SpeedPathMovement::HasReachedOrigin"
                  },
                  "parameters": [
                    "BoardBubble",
                    "SpeedPathMovement",
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnBoolean"
                  },
                  "parameters": [
                    "True"
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::SpwanerBehavior",
              "type": "behavior"
            },
            {
              "description": "Gutter",
              "name": "Gutter",
              "type": "objectList"
            },
            {
              "description": "Object stack",
              "name": "ObjectStack",
              "supplementaryInformation": "ObjectStack::ObjectStack",
              "type": "behavior"
            },
            {
              "description": "Bubble queue",
              "name": "BubbleQueue",
              "type": "objectList"
            },
            {
              "description": "Object stack",
              "name": "ObjectStack",
              "supplementaryInformation": "ObjectStack::ObjectStack",
              "type": "behavior"
            },
            {
              "description": "Board bubble",
              "name": "BoardBubble",
              "supplementaryInformation": "Sprite",
              "type": "objectList"
            },
            {
              "description": "Speed path movement",
              "name": "SpeedPathMovement",
              "supplementaryInformation": "CurvedMovement::SpeedPathMovement",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Make a bubble go back inside the spawner. It happens when the bubble was rewinded to the beginning of the gutter.",
          "fullName": "Unspawn bubble",
          "functionType": "Action",
          "name": "UnspawnBubble",
          "sentence": "_PARAM0_ unspawn _PARAM7_ from _PARAM5_ of _PARAM2_",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "LinkedObjects::PickObjectsLinkedTo"
                  },
                  "parameters": [
                    "",
                    "Gutter",
                    "Object",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::HasOnTop"
                  },
                  "parameters": [
                    "",
                    "Gutter",
                    "ObjectStack",
                    "BubbleQueue",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::HasOnTop"
                  },
                  "parameters": [
                    "",
                    "BubbleQueue",
                    "ObjectStack",
                    "BoardBubble",
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "ObjectStack::ObjectStack::Remove"
                  },
                  "parameters": [
                    "BubbleQueue",
                    "ObjectStack",
                    "BoardBubble",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::ObjectStack::AddOnTop"
                  },
                  "parameters": [
                    "Object",
                    "ObjectStack",
                    "BoardBubble",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "CurvedMovement::SpeedPathMovement::SetSpeed"
                  },
                  "parameters": [
                    "BoardBubble",
                    "SpeedPathMovement",
                    "=",
                    "0",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "Smoothy::SpwanerBehavior::SetSharedPropertySpawnedBubbleCount"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "-",
                    "1"
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::SpwanerBehavior",
              "type": "behavior"
            },
            {
              "description": "Gutter",
              "name": "Gutter",
              "type": "objectList"
            },
            {
              "description": "Gutter behavior",
              "name": "GutterBehavior",
              "supplementaryInformation": "Smoothy::GutterBehavior",
              "type": "behavior"
            },
            {
              "description": "Object stack",
              "name": "ObjectStack",
              "supplementaryInformation": "ObjectStack::ObjectStack",
              "type": "behavior"
            },
            {
              "description": "Bubble queue",
              "name": "BubbleQueue",
              "type": "objectList"
            },
            {
              "description": "Object stack",
              "name": "ObjectStack",
              "supplementaryInformation": "ObjectStack::ObjectStack",
              "type": "behavior"
            },
            {
              "description": "Board bubble",
              "name": "BoardBubble",
              "supplementaryInformation": "Sprite",
              "type": "objectList"
            },
            {
              "description": "Speed path movement",
              "name": "SpeedPathMovement",
              "supplementaryInformation": "CurvedMovement::SpeedPathMovement",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "the number of color that can be spwaned.",
          "fullName": "Color count",
          "functionType": "ExpressionAndCondition",
          "group": "SpwanerBehavior configuration",
          "name": "ColorCount",
          "sentence": "the color count",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnNumber"
                  },
                  "parameters": [
                    "Object.Behavior::PropertyColorCount()"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "Smoothy::SpwanerBehavior::SharedPropertySpawnedBubbleCount"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    ">=",
                    "Object.Behavior::PropertyFirstNewColorBubbleCount()"
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnNumber"
                  },
                  "parameters": [
                    "Object.Behavior::PropertyColorCount() + 1"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "Smoothy::SpwanerBehavior::SharedPropertySpawnedBubbleCount"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    ">=",
                    "Object.Behavior::PropertySecondNewColorBubbleCount()"
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnNumber"
                  },
                  "parameters": [
                    "Object.Behavior::PropertyColorCount() + 2"
                  ]
                }
              ]
            }
          ],
          "expressionType": {
            "type": "expression"
          },
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::SpwanerBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "the path name of the associated gutter.",
          "fullName": "Path name",
          "functionType": "ExpressionAndCondition",
          "group": "SpwanerBehavior configuration",
          "name": "PathName",
          "sentence": "the path name",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnString"
                  },
                  "parameters": [
                    "Object.Behavior::PropertyPathName()"
                  ]
                }
              ]
            }
          ],
          "expressionType": {
            "type": "string"
          },
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::SpwanerBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "fullName": "",
          "functionType": "ActionWithOperator",
          "getterName": "PathName",
          "name": "SetPathName",
          "sentence": "",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::SpwanerBehavior::SetPropertyPathName"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "GetArgumentAsString(\"Value\")"
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::SpwanerBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        }
      ],
      "propertyDescriptors": [
        {
          "value": "",
          "type": "Behavior",
          "label": "Object stack",
          "description": "",
          "group": "",
          "extraInformation": [
            "ObjectStack::ObjectStack"
          ],
          "name": "ObjectStack"
        },
        {
          "value": "4",
          "type": "Number",
          "unit": "Dimensionless",
          "label": "Color count",
          "description": "",
          "group": "Colors",
          "extraInformation": [],
          "name": "ColorCount"
        },
        {
          "value": "",
          "type": "String",
          "label": "Path name",
          "description": "",
          "group": "Colors",
          "extraInformation": [],
          "hidden": true,
          "name": "PathName"
        },
        {
          "value": "128",
          "type": "Number",
          "unit": "Dimensionless",
          "label": "Spawned bubbles count before 1st new color",
          "description": "",
          "group": "Colors",
          "extraInformation": [],
          "name": "FirstNewColorBubbleCount"
        },
        {
          "value": "256",
          "type": "Number",
          "unit": "Dimensionless",
          "label": "Spawned bubbles count before 2nd new color",
          "description": "",
          "group": "Colors",
          "extraInformation": [],
          "name": "SecondNewColorBubbleCount"
        },
        {
          "value": "32",
          "type": "Number",
          "unit": "Pixel",
          "label": "Bubble size",
          "description": "",
          "group": "",
          "extraInformation": [],
          "name": "BubbleSize"
        }
      ],
      "sharedPropertyDescriptors": [
        {
          "value": "",
          "type": "Number",
          "label": "",
          "description": "",
          "group": "",
          "extraInformation": [],
          "hidden": true,
          "name": "SpawnedBubbleCount"
        }
      ]
    },
    {
      "description": "Contains bubbles queues and push the queue at the beginning of the gutter.",
      "fullName": "Gutter",
      "name": "GutterBehavior",
      "objectType": "",
      "eventsFunctions": [
        {
          "description": "Update the position of the leading bubble from the tailing queue. This behavior uses it to choose the push speed.",
          "fullName": "Update first head position",
          "functionType": "Action",
          "name": "UpdateFirstHeadPosition",
          "sentence": "Update the position value of the _PARAM4_ at the head of _PARAM2_ from _PARAM0_",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "ObjectStack::HasOnTop"
                  },
                  "parameters": [
                    "",
                    "Object",
                    "ObjectStack",
                    "BubbleQueue",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::Contains"
                  },
                  "parameters": [
                    "",
                    "BubbleQueue",
                    "ObjectStack",
                    "BoardBubble",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::ContainsAt"
                  },
                  "parameters": [
                    "",
                    "BubbleQueue",
                    "ObjectStack",
                    "BoardBubble",
                    "0",
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::GutterBehavior::SetPropertyPushingQueueProgression"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "BoardBubble.SpeedPathMovement::PositionOnPath() / CurvedMovement::PathLength(Object.Behavior::PropertyPathName())"
                  ]
                }
              ],
              "events": [
                {
                  "disabled": true,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "DebuggerTools::ConsoleLog"
                      },
                      "parameters": [
                        "\"Head position: \" + ToString(Object.Behavior::PropertyPushingQueueProgression())",
                        "",
                        ""
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "Smoothy::GutterBehavior::PushingQueueProgression"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    ">",
                    "Object.Behavior::PropertyBeginningFillRatio()",
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::GutterBehavior::SetPropertyIsStartBoostEnabled"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    ""
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Comment",
              "color": {
                "b": 109,
                "g": 230,
                "r": 255,
                "textB": 0,
                "textG": 0,
                "textR": 0
              },
              "comment": "The PushingQueueProgression property is used to calculate the initial boost speed.\nThis is to make sure the boost doesn't start back to full speed when a match happens during the boost."
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::GutterBehavior::SetPropertyPushingQueueFarestProgression"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "max(Object.Behavior::PropertyPushingQueueFarestProgression(), Object.Behavior::PropertyPushingQueueProgression())"
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::GutterBehavior",
              "type": "behavior"
            },
            {
              "description": "Bubble queue",
              "name": "BubbleQueue",
              "type": "objectList"
            },
            {
              "description": "Object stack behavior",
              "name": "ObjectStack",
              "supplementaryInformation": "ObjectStack::ObjectStack",
              "type": "behavior"
            },
            {
              "description": "Board bubble",
              "name": "BoardBubble",
              "type": "objectList"
            },
            {
              "description": "Speed path movement",
              "name": "SpeedPathMovement",
              "supplementaryInformation": "CurvedMovement::SpeedPathMovement",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "the pushing queue progression in the gutter.",
          "fullName": "Pushing queue progression",
          "functionType": "ExpressionAndCondition",
          "name": "PushingQueueProgression",
          "sentence": "the pushing queue progression",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnNumber"
                  },
                  "parameters": [
                    "Object.Behavior::PropertyPushingQueueProgression()"
                  ]
                }
              ]
            }
          ],
          "expressionType": {
            "type": "expression"
          },
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::GutterBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Check if any bubble reach the end of the gutter.",
          "fullName": "Bubble reach hole",
          "functionType": "Condition",
          "name": "IsAnyBubbleReachHole",
          "sentence": "_PARAM4_ from _PARAM2_ reach the hole of _PARAM0_",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "ObjectStack::ContainsAt"
                  },
                  "parameters": [
                    "",
                    "Object",
                    "ObjectStack",
                    "BubbleQueue",
                    "0",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "ObjectStack::ContainsAt"
                  },
                  "parameters": [
                    "",
                    "BubbleQueue",
                    "ObjectStack",
                    "BoardBubble",
                    "0",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "CurvedMovement::SpeedPathMovement::HasReachedTarget"
                  },
                  "parameters": [
                    "BoardBubble",
                    "SpeedPathMovement",
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnBoolean"
                  },
                  "parameters": [
                    "True"
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::GutterBehavior",
              "type": "behavior"
            },
            {
              "description": "Bubble queue",
              "name": "BubbleQueue",
              "type": "objectList"
            },
            {
              "description": "Object stack behavior",
              "name": "ObjectStack",
              "supplementaryInformation": "ObjectStack::ObjectStack",
              "type": "behavior"
            },
            {
              "description": "Board bubble",
              "name": "BoardBubble",
              "type": "objectList"
            },
            {
              "description": "Speed path movement",
              "name": "SpeedPathMovement",
              "supplementaryInformation": "CurvedMovement::SpeedPathMovement",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Check if the bubble color at the end of the queue are matching and update the queues state accordingly.",
          "fullName": "Update queue matching status",
          "functionType": "Action",
          "name": "UpdateMatchingQueue",
          "sentence": "Update matching status between _PARAM2_ from _PARAM0_  according to _PARAM5_ colors",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "ModVarScene"
                  },
                  "parameters": [
                    "queueIndex",
                    "=",
                    "Object.ObjectStack::Height() - 2"
                  ]
                }
              ]
            },
            {
              "infiniteLoopWarning": true,
              "type": "BuiltinCommonInstructions::While",
              "whileConditions": [
                {
                  "type": {
                    "value": "VarScene"
                  },
                  "parameters": [
                    "queueIndex",
                    ">=",
                    "0"
                  ]
                }
              ],
              "conditions": [],
              "actions": [],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Smoothy::IsQueueMatching"
                      },
                      "parameters": [
                        "",
                        "Object",
                        "ObjectStack",
                        "BubbleQueue",
                        "ObjectStack",
                        "BoardBubble",
                        "SpeedPathMovement",
                        "Variable(queueIndex)",
                        ""
                      ]
                    }
                  ],
                  "actions": [],
                  "events": [
                    {
                      "disabled": true,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "value": "DebuggerTools::ConsoleLog"
                          },
                          "parameters": [
                            "\"Rewind\"",
                            "",
                            ""
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "ObjectStack::ContainsAt"
                          },
                          "parameters": [
                            "",
                            "Object",
                            "ObjectStack",
                            "BubbleQueue",
                            "Variable(queueIndex)",
                            ""
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::SetTailMatching"
                          },
                          "parameters": [
                            "BubbleQueue",
                            "BubbleQueueBehavior",
                            "yes",
                            ""
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "ObjectStack::ContainsAt"
                          },
                          "parameters": [
                            "",
                            "Object",
                            "ObjectStack",
                            "BubbleQueue",
                            "Variable(queueIndex) + 1",
                            ""
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::SetHeadMatching"
                          },
                          "parameters": [
                            "BubbleQueue",
                            "BubbleQueueBehavior",
                            "yes",
                            ""
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": true,
                        "value": "Smoothy::IsQueueMatching"
                      },
                      "parameters": [
                        "",
                        "Object",
                        "ObjectStack",
                        "BubbleQueue",
                        "ObjectStack",
                        "BoardBubble",
                        "SpeedPathMovement",
                        "Variable(queueIndex)",
                        ""
                      ]
                    }
                  ],
                  "actions": [],
                  "events": [
                    {
                      "disabled": true,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "value": "DebuggerTools::ConsoleLog"
                          },
                          "parameters": [
                            "\"Stop rewind\"",
                            "",
                            ""
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "ObjectStack::ContainsAt"
                          },
                          "parameters": [
                            "",
                            "Object",
                            "ObjectStack",
                            "BubbleQueue",
                            "Variable(queueIndex)",
                            ""
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::SetTailMatching"
                          },
                          "parameters": [
                            "BubbleQueue",
                            "BubbleQueueBehavior",
                            "no",
                            ""
                          ]
                        }
                      ]
                    },
                    {
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "value": "ObjectStack::ContainsAt"
                          },
                          "parameters": [
                            "",
                            "Object",
                            "ObjectStack",
                            "BubbleQueue",
                            "Variable(queueIndex) + 1",
                            ""
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "value": "Smoothy::BubbleQueueBehavior::SetHeadMatching"
                          },
                          "parameters": [
                            "BubbleQueue",
                            "BubbleQueueBehavior",
                            "no",
                            ""
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "value": "ModVarScene"
                      },
                      "parameters": [
                        "queueIndex",
                        "-",
                        "1"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::GutterBehavior",
              "type": "behavior"
            },
            {
              "description": "Bubble queue",
              "name": "BubbleQueue",
              "type": "objectList"
            },
            {
              "description": "Bubble queue behavior",
              "name": "BubbleQueueBehavior",
              "supplementaryInformation": "Smoothy::BubbleQueueBehavior",
              "type": "behavior"
            },
            {
              "description": "Object stack behavior",
              "name": "ObjectStack",
              "supplementaryInformation": "ObjectStack::ObjectStack",
              "type": "behavior"
            },
            {
              "description": "Board bubble",
              "name": "BoardBubble",
              "supplementaryInformation": "Sprite",
              "type": "objectList"
            },
            {
              "description": "Board bubble behavior",
              "name": "BoardBubbleBehavior",
              "supplementaryInformation": "Smoothy::BoardBubbleBehavior",
              "type": "behavior"
            },
            {
              "description": "Speed path movement",
              "name": "SpeedPathMovement",
              "supplementaryInformation": "CurvedMovement::SpeedPathMovement",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "the path name of the gutter.",
          "fullName": "Path name",
          "functionType": "ExpressionAndCondition",
          "name": "PathName",
          "sentence": "the path name",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnString"
                  },
                  "parameters": [
                    "Object.Behavior::PropertyPathName()"
                  ]
                }
              ]
            }
          ],
          "expressionType": {
            "type": "string"
          },
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::GutterBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "fullName": "",
          "functionType": "ActionWithOperator",
          "getterName": "PathName",
          "name": "SetPathName",
          "sentence": "",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::GutterBehavior::SetPropertyPathName"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "GetArgumentAsString(\"Value\")"
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::GutterBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Check if the beginning boost is enabled.",
          "fullName": "Beginning boost is enabled",
          "functionType": "Condition",
          "name": "IsBeginningBostEnabled",
          "sentence": "Beginning boost is enabled for _PARAM0_",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "Smoothy::GutterBehavior::PropertyIsStartBoostEnabled"
                  },
                  "parameters": [
                    "Object",
                    "Behavior"
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnBoolean"
                  },
                  "parameters": [
                    "True"
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::GutterBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Check if bubbles are near to the end of gutter and the push speed should slow down.",
          "fullName": "Near death",
          "functionType": "Condition",
          "name": "IsNearDeath",
          "sentence": "_PARAM0_ is near to death",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "Smoothy::GutterBehavior::PushingQueueProgression"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    ">=",
                    "Object.Behavior::PropertyNearDeathZoneBeginningLengthRatio()",
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnBoolean"
                  },
                  "parameters": [
                    "True"
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::GutterBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "the identifier of the gutter.",
          "fullName": "Identifier",
          "functionType": "ExpressionAndCondition",
          "group": "Gutter configuration",
          "name": "Identifier",
          "sentence": "the identifier",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnNumber"
                  },
                  "parameters": [
                    "Object.Behavior::PropertyIdentifier()"
                  ]
                }
              ]
            }
          ],
          "expressionType": {
            "type": "expression"
          },
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::GutterBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "fullName": "",
          "functionType": "ActionWithOperator",
          "getterName": "Identifier",
          "name": "SetIdentifier",
          "sentence": "",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "Smoothy::GutterBehavior::SetPropertyIdentifier"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    "=",
                    "GetArgumentAsNumber(\"Value\")"
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::GutterBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "the push speed",
          "fullName": "Push speed",
          "functionType": "ExpressionAndCondition",
          "name": "PushSpeed",
          "sentence": "the push speed",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "value": "Smoothy::GutterBehavior::IsBeginningBostEnabled"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    ""
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnNumber"
                  },
                  "parameters": [
                    "ExtendedMath::Map(Object.Behavior::PropertyPushingQueueFarestProgression(), 0, Object.Behavior::PropertyBeginningFillRatio(), Object.Behavior::BoostBeginningSpeed(), Object.Behavior::PropertySafeZoneEndSpeed())"
                  ]
                }
              ]
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "inverted": true,
                    "value": "Smoothy::GutterBehavior::IsBeginningBostEnabled"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    ""
                  ]
                }
              ],
              "actions": [],
              "events": [
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Smoothy::GutterBehavior::PushingQueueProgression"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "<",
                        "Object.Behavior::PropertySafeZoneEndLengthRatio()",
                        ""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetReturnNumber"
                      },
                      "parameters": [
                        "ExtendedMath::Map(Object.Behavior::PropertyPushingQueueProgression(), 0, Object.Behavior::PropertySafeZoneEndLengthRatio(), Object.Behavior::PropertyBeginningSpeed(), Object.Behavior::PropertySafeZoneEndSpeed())"
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Smoothy::GutterBehavior::PushingQueueProgression"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        ">=",
                        "Object.Behavior::PropertySafeZoneEndLengthRatio()",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "Smoothy::GutterBehavior::PushingQueueProgression"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "<",
                        "Object.Behavior::PropertyNormalZoneEndLengthRatio()",
                        ""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetReturnNumber"
                      },
                      "parameters": [
                        "ExtendedMath::Map(Object.Behavior::PropertyPushingQueueProgression(), Object.Behavior::PropertySafeZoneEndLengthRatio(), Object.Behavior::PropertyNormalZoneEndLengthRatio(), Object.Behavior::PropertySafeZoneEndSpeed(), Object.Behavior::PropertyNormalZoneEndSpeed())"
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Smoothy::GutterBehavior::PushingQueueProgression"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        ">=",
                        "Object.Behavior::PropertyNormalZoneEndLengthRatio()",
                        ""
                      ]
                    },
                    {
                      "type": {
                        "value": "Smoothy::GutterBehavior::PushingQueueProgression"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "<",
                        "Object.Behavior::PropertyNearDeathZoneBeginningLengthRatio()",
                        ""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetReturnNumber"
                      },
                      "parameters": [
                        "ExtendedMath::Map(Object.Behavior::PropertyPushingQueueProgression(), Object.Behavior::PropertyNormalZoneEndLengthRatio(), Object.Behavior::PropertyNearDeathZoneBeginningLengthRatio(), Object.Behavior::PropertyNormalZoneEndSpeed(), Object.Behavior::PropertyNearDeathZoneBeginningSpeed())"
                      ]
                    }
                  ]
                },
                {
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "value": "Smoothy::GutterBehavior::PushingQueueProgression"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        ">=",
                        "Object.Behavior::PropertyNearDeathZoneBeginningLengthRatio()",
                        ""
                      ]
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "value": "SetReturnNumber"
                      },
                      "parameters": [
                        "ExtendedMath::Map(Object.Behavior::PropertyPushingQueueProgression(), Object.Behavior::PropertyNearDeathZoneBeginningLengthRatio(), 1, Object.Behavior::PropertyNearDeathZoneBeginningSpeed(), Object.Behavior::PropertyEndSpeed())"
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "expressionType": {
            "type": "expression"
          },
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::GutterBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "the push acceleration",
          "fullName": "Push acceleration",
          "functionType": "ExpressionAndCondition",
          "name": "PushAcceleration",
          "sentence": "the push acceleration",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnNumber"
                  },
                  "parameters": [
                    "Object.Behavior::PushSpeed() / Object.Behavior::PropertyAccelerationDuration()"
                  ]
                }
              ]
            }
          ],
          "expressionType": {
            "type": "expression"
          },
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::GutterBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "the push deceleration",
          "fullName": "Push deceleration",
          "functionType": "ExpressionAndCondition",
          "name": "PushDeceleration",
          "sentence": "the push deceleration",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnNumber"
                  },
                  "parameters": [
                    "Object.Behavior::PushSpeed() / Object.Behavior::PropertyAccelerationDuration()"
                  ]
                }
              ]
            }
          ],
          "expressionType": {
            "type": "expression"
          },
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::GutterBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "the speed at the beginning of the game.",
          "fullName": "Boost beggining speed",
          "functionType": "ExpressionAndCondition",
          "name": "BoostBeginningSpeed",
          "private": true,
          "sentence": "the beginning speed ",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnNumber"
                  },
                  "parameters": [
                    "Smoothy::SpeedToReach(Object.Behavior::PropertyBeginningFillRatio() * CurvedMovement::PathLength(Object.Behavior::PathName()), Object.Behavior::PropertyStartBoostDeceleration(), Object.Behavior::PropertyBeginningSpeed())"
                  ]
                }
              ]
            }
          ],
          "expressionType": {
            "type": "expression"
          },
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::GutterBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        }
      ],
      "propertyDescriptors": [
        {
          "value": "",
          "type": "Behavior",
          "label": "Object stack",
          "description": "",
          "group": "",
          "extraInformation": [
            "ObjectStack::ObjectStack"
          ],
          "name": "ObjectStack"
        },
        {
          "value": "0",
          "type": "Number",
          "unit": "Dimensionless",
          "label": "Pushing queue progression",
          "description": "",
          "group": "",
          "extraInformation": [],
          "hidden": true,
          "name": "PushingQueueProgression"
        },
        {
          "value": "",
          "type": "String",
          "label": "Path name",
          "description": "",
          "group": "",
          "extraInformation": [],
          "hidden": true,
          "name": "PathName"
        },
        {
          "value": "true",
          "type": "Boolean",
          "label": "Start boost is enabled",
          "description": "",
          "group": "",
          "extraInformation": [],
          "hidden": true,
          "name": "IsStartBoostEnabled"
        },
        {
          "value": "64",
          "type": "Number",
          "unit": "PixelSpeed",
          "label": "Beginning push speed",
          "description": "",
          "group": "Speed",
          "extraInformation": [],
          "name": "BeginningSpeed"
        },
        {
          "value": "17.8",
          "type": "Number",
          "unit": "PixelSpeed",
          "label": "End push speed",
          "description": "",
          "group": "Speed",
          "extraInformation": [],
          "name": "EndSpeed"
        },
        {
          "value": "0",
          "type": "Number",
          "unit": "Dimensionless",
          "label": "Identifier",
          "description": "",
          "group": "",
          "extraInformation": [],
          "hidden": true,
          "name": "Identifier"
        },
        {
          "value": "2",
          "type": "Number",
          "unit": "Second",
          "label": "Time to get to full speed",
          "description": "",
          "group": "Acceleration",
          "extraInformation": [],
          "name": "AccelerationDuration"
        },
        {
          "value": "0.5",
          "type": "Number",
          "unit": "Dimensionless",
          "label": "Beggining fill ratio",
          "description": "",
          "group": "Start boost",
          "extraInformation": [],
          "name": "BeginningFillRatio"
        },
        {
          "value": "889",
          "type": "Number",
          "unit": "PixelAcceleration",
          "label": "Start boost deceleration",
          "description": "",
          "group": "Start boost",
          "extraInformation": [],
          "name": "StartBoostDeceleration"
        },
        {
          "value": "64",
          "type": "Number",
          "unit": "PixelSpeed",
          "label": "Safe zone end push speed",
          "description": "",
          "group": "Speed",
          "extraInformation": [],
          "name": "SafeZoneEndSpeed"
        },
        {
          "value": "0",
          "type": "Number",
          "label": "Safe zone end length ratio",
          "description": "",
          "group": "Speed zone",
          "extraInformation": [],
          "name": "SafeZoneEndLengthRatio"
        },
        {
          "value": "64",
          "type": "Number",
          "unit": "PixelSpeed",
          "label": "Normal zone end push speed",
          "description": "",
          "group": "Speed",
          "extraInformation": [],
          "name": "NormalZoneEndSpeed"
        },
        {
          "value": "0.87",
          "type": "Number",
          "label": "Normal zone end length ratio",
          "description": "",
          "group": "Speed zone",
          "extraInformation": [],
          "name": "NormalZoneEndLengthRatio"
        },
        {
          "value": "17.8",
          "type": "Number",
          "unit": "PixelSpeed",
          "label": "Near death zone beginning push speed",
          "description": "",
          "group": "Speed",
          "extraInformation": [],
          "name": "NearDeathZoneBeginningSpeed"
        },
        {
          "value": "0.88",
          "type": "Number",
          "unit": "Dimensionless",
          "label": "Near death zone beginning length ratio",
          "description": "",
          "group": "Speed zone",
          "extraInformation": [],
          "name": "NearDeathZoneBeginningLengthRatio"
        },
        {
          "value": "0",
          "type": "Number",
          "unit": "Dimensionless",
          "label": "",
          "description": "",
          "group": "",
          "extraInformation": [],
          "hidden": true,
          "name": "PushingQueueFarestProgression"
        }
      ],
      "sharedPropertyDescriptors": []
    },
    {
      "description": "Animate explosions.",
      "fullName": "Board bubble",
      "name": "BoardBubbleBehavior",
      "objectType": "Sprite",
      "eventsFunctions": [
        {
          "description": "Change the particle emmiter color according to the bubble and delete the bubble.",
          "fullName": "Explode",
          "functionType": "Action",
          "name": "Explode",
          "sentence": "Explode _PARAM0_ into _PARAM2_",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "Create"
                  },
                  "parameters": [
                    "",
                    "BubbleExplosion",
                    "Object.X()",
                    "Object.Y()",
                    ""
                  ]
                },
                {
                  "type": {
                    "value": "ParticleSystem::ParticleColor1"
                  },
                  "parameters": [
                    "BubbleExplosion",
                    "VariableString(ColorValues[Object.Animation()])"
                  ]
                },
                {
                  "type": {
                    "value": "ParticleSystem::ParticleColor2"
                  },
                  "parameters": [
                    "BubbleExplosion",
                    "VariableString(ColorValues[Object.Animation()])"
                  ]
                },
                {
                  "type": {
                    "value": "Delete"
                  },
                  "parameters": [
                    "Object",
                    ""
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "supplementaryInformation": "Sprite",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BoardBubbleBehavior",
              "type": "behavior"
            },
            {
              "description": "Bubble explosion",
              "name": "BubbleExplosion",
              "supplementaryInformation": "ParticleSystem::ParticleEmitter",
              "type": "objectList"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "the bubble size.",
          "fullName": "Bubble size",
          "functionType": "ExpressionAndCondition",
          "name": "BubbleSize",
          "sentence": "the bubble size",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "SetReturnNumber"
                  },
                  "parameters": [
                    "Object.Behavior::PropertyBubbleSize()"
                  ]
                }
              ]
            }
          ],
          "expressionType": {
            "type": "expression"
          },
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "supplementaryInformation": "Sprite",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "Smoothy::BoardBubbleBehavior",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        }
      ],
      "propertyDescriptors": [
        {
          "value": "32",
          "type": "Number",
          "unit": "Pixel",
          "label": "Bubble size",
          "description": "",
          "group": "",
          "extraInformation": [],
          "name": "BubbleSize"
        }
      ],
      "sharedPropertyDescriptors": []
    }
  ],
  "eventsBasedObjects": []
}